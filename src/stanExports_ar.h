// Generated by rstantools.  Do not edit by hand.

/*
    atsarpackage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    atsarpackage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with atsarpackage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_ar_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 42> locations_array__ =
  {" (found before start of program)",
  " (in 'ar', line 9, column 2 to column 22)",
  " (in 'ar', line 10, column 2 to column 40)",
  " (in 'ar', line 11, column 2 to column 21)",
  " (in 'ar', line 12, column 2 to column 27)",
  " (in 'ar', line 15, column 2 to column 15)",
  " (in 'ar', line 17, column 4 to column 16)",
  " (in 'ar', line 16, column 16 to line 18, column 3)",
  " (in 'ar', line 16, column 2 to line 18, column 3)",
  " (in 'ar', line 23, column 6 to column 18)",
  " (in 'ar', line 22, column 11 to line 24, column 5)",
  " (in 'ar', line 21, column 6 to column 22)",
  " (in 'ar', line 20, column 21 to line 22, column 5)",
  " (in 'ar', line 20, column 4 to line 24, column 5)",
  " (in 'ar', line 26, column 6 to column 40)",
  " (in 'ar', line 25, column 18 to line 27, column 5)",
  " (in 'ar', line 25, column 4 to line 27, column 5)",
  " (in 'ar', line 19, column 20 to line 28, column 3)",
  " (in 'ar', line 19, column 2 to line 28, column 3)",
  " (in 'ar', line 32, column 4 to column 21)",
  " (in 'ar', line 31, column 19 to line 33, column 3)",
  " (in 'ar', line 31, column 2 to line 33, column 3)",
  " (in 'ar', line 37, column 4 to column 45)",
  " (in 'ar', line 36, column 9 to line 38, column 3)",
  " (in 'ar', line 35, column 4 to column 38)",
  " (in 'ar', line 34, column 18 to line 36, column 3)",
  " (in 'ar', line 34, column 2 to line 38, column 3)",
  " (in 'ar', line 39, column 2 to column 27)",
  " (in 'ar', line 40, column 2 to column 20)",
  " (in 'ar', line 42, column 4 to column 26)",
  " (in 'ar', line 41, column 16 to line 43, column 3)",
  " (in 'ar', line 41, column 2 to line 43, column 3)",
  " (in 'ar', line 2, column 2 to column 17)",
  " (in 'ar', line 3, column 9 to column 10)",
  " (in 'ar', line 3, column 2 to column 12)",
  " (in 'ar', line 4, column 2 to column 17)",
  " (in 'ar', line 5, column 2 to column 25)",
  " (in 'ar', line 6, column 2 to column 22)",
  " (in 'ar', line 10, column 37 to column 38)",
  " (in 'ar', line 11, column 10 to column 19)",
  " (in 'ar', line 12, column 19 to column 25)",
  " (in 'ar', line 15, column 12 to column 13)"};
#include <stan_meta_header.hpp>
class model_ar final : public model_base_crtp<model_ar> {
private:
  int N;
  std::vector<double> y;
  int P;
  int est_drift;
  int est_nu;
public:
  ~model_ar() {}
  model_ar(stan::io::var_context& context__, unsigned int random_seed__ = 0,
           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ = "model_ar_namespace::model_ar";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 32;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 32;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 34;
      y = context__.vals_r("y");
      current_statement__ = 35;
      context__.validate_dims("data initialization", "P", "int",
        std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      current_statement__ = 35;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "P", P, 1);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "est_drift", "int",
        std::vector<size_t>{});
      est_drift = std::numeric_limits<int>::min();
      current_statement__ = 36;
      est_drift = context__.vals_i("est_drift")[(1 - 1)];
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "est_drift", est_drift,
        0);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "est_nu", "int",
        std::vector<size_t>{});
      est_nu = std::numeric_limits<int>::min();
      current_statement__ = 37;
      est_nu = context__.vals_i("est_nu")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "est_nu", est_nu, 0);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("phi", "P", P);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("mu", "est_drift", est_drift);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("nu", "est_nu", est_nu);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("pred", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + P + est_drift + est_nu;
  }
  inline std::string model_name() const final {
    return "model_ar";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_ar_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(P, DUMMY_VAR__);
      current_statement__ = 2;
      phi = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(-0.999, 0.999, lp__, P);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(est_drift, DUMMY_VAR__);
      current_statement__ = 3;
      mu = in__.template read<std::vector<local_scalar_t__>>(est_drift);
      std::vector<local_scalar_t__> nu =
        std::vector<local_scalar_t__>(est_nu, DUMMY_VAR__);
      current_statement__ = 4;
      nu = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(2, lp__, est_nu);
      std::vector<local_scalar_t__> pred =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 8;
      for (int i = 1; i <= P; ++i) {
        current_statement__ = 6;
        stan::model::assign(pred, 0, "assigning variable pred",
          stan::model::index_uni(i));
      }
      current_statement__ = 18;
      for (int i = (P + 1); i <= N; ++i) {
        current_statement__ = 13;
        if (stan::math::logical_eq(est_drift, 1)) {
          current_statement__ = 11;
          stan::model::assign(pred,
            stan::model::rvalue(mu, "mu", stan::model::index_uni(1)),
            "assigning variable pred", stan::model::index_uni(i));
        } else {
          current_statement__ = 9;
          stan::model::assign(pred, 0, "assigning variable pred",
            stan::model::index_uni(i));
        }
        current_statement__ = 16;
        for (int j = 1; j <= P; ++j) {
          current_statement__ = 14;
          stan::model::assign(pred,
            (stan::model::rvalue(pred, "pred", stan::model::index_uni(i)) +
            (stan::model::rvalue(phi, "phi", stan::model::index_uni(j)) *
            stan::model::rvalue(y, "y", stan::model::index_uni((i - j))))),
            "assigning variable pred", stan::model::index_uni(i));
        }
      }
      {
        current_statement__ = 21;
        if (stan::math::logical_eq(est_drift, 1)) {
          current_statement__ = 19;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, 1));
        }
        current_statement__ = 26;
        if (stan::math::logical_eq(est_nu, 0)) {
          current_statement__ = 24;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_min_max(P, N)),
                           stan::model::rvalue(pred, "pred",
                             stan::model::index_min_max(P, N)), sigma));
        } else {
          current_statement__ = 22;
          lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_min_max(P, N)), nu,
                           stan::model::rvalue(pred, "pred",
                             stan::model::index_min_max(P, N)), sigma));
        }
        current_statement__ = 27;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma, 3, 0, 2));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(phi, 0, 1));
        current_statement__ = 31;
        if (stan::math::logical_eq(est_nu, 1)) {
          current_statement__ = 29;
          lp_accum__.add(stan::math::student_t_lpdf<propto__>(nu, 3, 2, 2));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_ar_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      std::vector<double> phi =
        std::vector<double>(P, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      phi = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(-0.999, 0.999, lp__, P);
      std::vector<double> mu =
        std::vector<double>(est_drift,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      mu = in__.template read<std::vector<local_scalar_t__>>(est_drift);
      std::vector<double> nu =
        std::vector<double>(est_nu, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      nu = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(2, lp__, est_nu);
      std::vector<double> pred =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      out__.write(sigma);
      out__.write(phi);
      out__.write(mu);
      out__.write(nu);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 8;
      for (int i = 1; i <= P; ++i) {
        current_statement__ = 6;
        stan::model::assign(pred, 0, "assigning variable pred",
          stan::model::index_uni(i));
      }
      current_statement__ = 18;
      for (int i = (P + 1); i <= N; ++i) {
        current_statement__ = 13;
        if (stan::math::logical_eq(est_drift, 1)) {
          current_statement__ = 11;
          stan::model::assign(pred,
            stan::model::rvalue(mu, "mu", stan::model::index_uni(1)),
            "assigning variable pred", stan::model::index_uni(i));
        } else {
          current_statement__ = 9;
          stan::model::assign(pred, 0, "assigning variable pred",
            stan::model::index_uni(i));
        }
        current_statement__ = 16;
        for (int j = 1; j <= P; ++j) {
          current_statement__ = 14;
          stan::model::assign(pred,
            (stan::model::rvalue(pred, "pred", stan::model::index_uni(i)) +
            (stan::model::rvalue(phi, "phi", stan::model::index_uni(j)) *
            stan::model::rvalue(y, "y", stan::model::index_uni((i - j))))),
            "assigning variable pred", stan::model::index_uni(i));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(pred);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(P, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(phi, in__.read<std::vector<local_scalar_t__>>(P),
        "assigning variable phi");
      out__.write_free_lub(-0.999, 0.999, phi);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(est_drift, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(mu,
        in__.read<std::vector<local_scalar_t__>>(est_drift),
        "assigning variable mu");
      out__.write(mu);
      std::vector<local_scalar_t__> nu =
        std::vector<local_scalar_t__>(est_nu, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(nu,
        in__.read<std::vector<local_scalar_t__>>(est_nu),
        "assigning variable nu");
      out__.write_free_lb(2, nu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{static_cast<size_t>(P)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(est_drift)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "nu", "double",
        std::vector<size_t>{static_cast<size_t>(est_nu)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(P, DUMMY_VAR__);
      current_statement__ = 2;
      phi = context__.vals_r("phi");
      out__.write_free_lub(-0.999, 0.999, phi);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(est_drift, DUMMY_VAR__);
      current_statement__ = 3;
      mu = context__.vals_r("mu");
      out__.write(mu);
      std::vector<local_scalar_t__> nu =
        std::vector<local_scalar_t__>(est_nu, DUMMY_VAR__);
      current_statement__ = 4;
      nu = context__.vals_r("nu");
      out__.write_free_lb(2, nu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"sigma", "phi", "mu", "nu"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"pred"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(P)},
                std::vector<size_t>{static_cast<size_t>(est_drift)},
                std::vector<size_t>{static_cast<size_t>(est_nu)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_drift; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_nu; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "pred" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_drift; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_nu; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "pred" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(P) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_drift) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_nu) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(P) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_drift) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_nu) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + P) + est_drift) + est_nu);
    const size_t num_transformed = emit_transformed_parameters * (N);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + P) + est_drift) + est_nu);
    const size_t num_transformed = emit_transformed_parameters * (N);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_ar_namespace::model_ar;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ar_namespace::profiles__;
}
#endif
#endif
