// Generated by rstantools.  Do not edit by hand.

/*
    atsarpackage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    atsarpackage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with atsarpackage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_ss_ar_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 90> locations_array__ =
  {" (found before start of program)",
  " (in 'ss_ar', line 12, column 2 to column 10)",
  " (in 'ss_ar', line 13, column 2 to column 37)",
  " (in 'ss_ar', line 14, column 2 to column 21)",
  " (in 'ss_ar', line 15, column 2 to column 22)",
  " (in 'ss_ar', line 16, column 2 to column 30)",
  " (in 'ss_ar', line 17, column 2 to column 26)",
  " (in 'ss_ar', line 18, column 2 to column 27)",
  " (in 'ss_ar', line 21, column 2 to column 17)",
  " (in 'ss_ar', line 22, column 2 to column 12)",
  " (in 'ss_ar', line 76, column 2 to column 24)",
  " (in 'ss_ar', line 23, column 2 to column 15)",
  " (in 'ss_ar', line 24, column 2 to column 11)",
  " (in 'ss_ar', line 26, column 4 to column 17)",
  " (in 'ss_ar', line 25, column 19 to line 27, column 3)",
  " (in 'ss_ar', line 25, column 2 to line 27, column 3)",
  " (in 'ss_ar', line 29, column 4 to column 73)",
  " (in 'ss_ar', line 28, column 16 to line 30, column 3)",
  " (in 'ss_ar', line 28, column 2 to line 30, column 3)",
  " (in 'ss_ar', line 78, column 35 to column 97)",
  " (in 'ss_ar', line 78, column 16 to column 97)",
  " (in 'ss_ar', line 78, column 2 to column 97)",
  " (in 'ss_ar', line 79, column 35 to column 104)",
  " (in 'ss_ar', line 79, column 16 to column 104)",
  " (in 'ss_ar', line 79, column 2 to column 104)",
  " (in 'ss_ar', line 80, column 35 to column 96)",
  " (in 'ss_ar', line 80, column 16 to column 96)",
  " (in 'ss_ar', line 80, column 2 to column 96)",
  " (in 'ss_ar', line 81, column 35 to column 114)",
  " (in 'ss_ar', line 81, column 16 to column 114)",
  " (in 'ss_ar', line 81, column 2 to column 114)",
  " (in 'ss_ar', line 82, column 35 to column 100)",
  " (in 'ss_ar', line 82, column 16 to column 100)",
  " (in 'ss_ar', line 82, column 2 to column 100)",
  " (in 'ss_ar', line 33, column 2 to column 20)",
  " (in 'ss_ar', line 34, column 2 to column 30)",
  " (in 'ss_ar', line 36, column 4 to column 22)",
  " (in 'ss_ar', line 35, column 19 to line 37, column 3)",
  " (in 'ss_ar', line 35, column 2 to line 37, column 3)",
  " (in 'ss_ar', line 39, column 4 to column 26)",
  " (in 'ss_ar', line 38, column 16 to line 40, column 3)",
  " (in 'ss_ar', line 38, column 2 to line 40, column 3)",
  " (in 'ss_ar', line 41, column 2 to column 35)",
  " (in 'ss_ar', line 42, column 2 to column 31)",
  " (in 'ss_ar', line 46, column 4 to column 32)",
  " (in 'ss_ar', line 45, column 9 to line 47, column 3)",
  " (in 'ss_ar', line 44, column 4 to column 27)",
  " (in 'ss_ar', line 43, column 16 to line 45, column 3)",
  " (in 'ss_ar', line 43, column 2 to line 47, column 3)",
  " (in 'ss_ar', line 51, column 6 to column 50)",
  " (in 'ss_ar', line 49, column 24 to line 52, column 5)",
  " (in 'ss_ar', line 49, column 4 to line 52, column 5)",
  " (in 'ss_ar', line 48, column 16 to line 53, column 3)",
  " (in 'ss_ar', line 48, column 2 to line 53, column 3)",
  " (in 'ss_ar', line 56, column 6 to column 52)",
  " (in 'ss_ar', line 55, column 24 to line 57, column 5)",
  " (in 'ss_ar', line 55, column 4 to line 57, column 5)",
  " (in 'ss_ar', line 54, column 16 to line 58, column 3)",
  " (in 'ss_ar', line 54, column 2 to line 58, column 3)",
  " (in 'ss_ar', line 61, column 6 to column 48)",
  " (in 'ss_ar', line 60, column 24 to line 62, column 5)",
  " (in 'ss_ar', line 60, column 4 to line 62, column 5)",
  " (in 'ss_ar', line 59, column 16 to line 63, column 3)",
  " (in 'ss_ar', line 59, column 2 to line 63, column 3)",
  " (in 'ss_ar', line 66, column 6 to column 67)",
  " (in 'ss_ar', line 65, column 24 to line 67, column 5)",
  " (in 'ss_ar', line 65, column 4 to line 67, column 5)",
  " (in 'ss_ar', line 64, column 16 to line 68, column 3)",
  " (in 'ss_ar', line 64, column 2 to line 68, column 3)",
  " (in 'ss_ar', line 71, column 6 to column 53)",
  " (in 'ss_ar', line 70, column 24 to line 72, column 5)",
  " (in 'ss_ar', line 70, column 4 to line 72, column 5)",
  " (in 'ss_ar', line 69, column 16 to line 73, column 3)",
  " (in 'ss_ar', line 69, column 2 to line 73, column 3)",
  " (in 'ss_ar', line 2, column 2 to column 17)",
  " (in 'ss_ar', line 3, column 2 to column 21)",
  " (in 'ss_ar', line 4, column 9 to column 14)",
  " (in 'ss_ar', line 4, column 2 to column 18)",
  " (in 'ss_ar', line 5, column 12 to column 17)",
  " (in 'ss_ar', line 5, column 2 to column 19)",
  " (in 'ss_ar', line 6, column 15 to column 22)",
  " (in 'ss_ar', line 6, column 2 to column 24)",
  " (in 'ss_ar', line 7, column 2 to column 25)",
  " (in 'ss_ar', line 8, column 2 to column 22)",
  " (in 'ss_ar', line 9, column 2 to column 13)",
  " (in 'ss_ar', line 14, column 10 to column 19)",
  " (in 'ss_ar', line 15, column 9 to column 12)",
  " (in 'ss_ar', line 18, column 19 to column 25)",
  " (in 'ss_ar', line 21, column 9 to column 10)",
  " (in 'ss_ar', line 76, column 9 to column 14)"};
#include <stan_meta_header.hpp>
class model_ss_ar final : public model_base_crtp<model_ss_ar> {
private:
  int N;
  int n_pos;
  Eigen::Matrix<double,-1,1> y_data__;
  std::vector<int> y_int;
  std::vector<int> pos_indx;
  int est_drift;
  int est_nu;
  int family;
  int pro_dev_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
public:
  ~model_ss_ar() {}
  model_ss_ar(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_ss_ar_namespace::model_ss_ar";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 74;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 74;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "n_pos", "int",
        std::vector<size_t>{});
      n_pos = std::numeric_limits<int>::min();
      current_statement__ = 75;
      n_pos = context__.vals_i("n_pos")[(1 - 1)];
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "n_pos", n_pos, 0);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("y", "n_pos", n_pos);
      current_statement__ = 77;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n_pos)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(n_pos,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), n_pos);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 77;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 77;
        pos__ = 1;
        current_statement__ = 77;
        for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
          current_statement__ = 77;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 77;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 78;
      stan::math::validate_non_negative_index("y_int", "n_pos", n_pos);
      current_statement__ = 79;
      context__.validate_dims("data initialization", "y_int", "int",
        std::vector<size_t>{static_cast<size_t>(n_pos)});
      y_int = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      current_statement__ = 79;
      y_int = context__.vals_i("y_int");
      current_statement__ = 80;
      stan::math::validate_non_negative_index("pos_indx", "n_pos + 2", (n_pos
        + 2));
      current_statement__ = 81;
      context__.validate_dims("data initialization", "pos_indx", "int",
        std::vector<size_t>{static_cast<size_t>((n_pos + 2))});
      pos_indx = std::vector<int>((n_pos + 2),
                   std::numeric_limits<int>::min());
      current_statement__ = 81;
      pos_indx = context__.vals_i("pos_indx");
      current_statement__ = 82;
      context__.validate_dims("data initialization", "est_drift", "int",
        std::vector<size_t>{});
      est_drift = std::numeric_limits<int>::min();
      current_statement__ = 82;
      est_drift = context__.vals_i("est_drift")[(1 - 1)];
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "est_drift", est_drift,
        0);
      current_statement__ = 83;
      context__.validate_dims("data initialization", "est_nu", "int",
        std::vector<size_t>{});
      est_nu = std::numeric_limits<int>::min();
      current_statement__ = 83;
      est_nu = context__.vals_i("est_nu")[(1 - 1)];
      current_statement__ = 83;
      stan::math::check_greater_or_equal(function__, "est_nu", est_nu, 0);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "family", "int",
        std::vector<size_t>{});
      family = std::numeric_limits<int>::min();
      current_statement__ = 84;
      family = context__.vals_i("family")[(1 - 1)];
      current_statement__ = 85;
      stan::math::validate_non_negative_index("mu", "est_drift", est_drift);
      current_statement__ = 86;
      pro_dev_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 86;
      pro_dev_1dim__ = (N - 1);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("pro_dev", "N - 1",
        pro_dev_1dim__);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("nu", "est_nu", est_nu);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("pred", "N", N);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("log_lik", "n_pos", n_pos);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + est_drift + pro_dev_1dim__ + 1 + 1 + est_nu;
  }
  inline std::string model_name() const final {
    return "model_ss_ar";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_ss_ar_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ x0 = DUMMY_VAR__;
      current_statement__ = 1;
      x0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = in__.template read_constrain_lub<local_scalar_t__,
              jacobian__>(-0.999, 0.999, lp__);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(est_drift, DUMMY_VAR__);
      current_statement__ = 3;
      mu = in__.template read<std::vector<local_scalar_t__>>(est_drift);
      Eigen::Matrix<local_scalar_t__,-1,1> pro_dev =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(pro_dev_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      pro_dev = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(pro_dev_1dim__);
      local_scalar_t__ sigma_process = DUMMY_VAR__;
      current_statement__ = 5;
      sigma_process = in__.template read_constrain_lb<local_scalar_t__,
                        jacobian__>(0, lp__);
      local_scalar_t__ sigma_obs = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_obs = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      std::vector<local_scalar_t__> nu =
        std::vector<local_scalar_t__>(est_nu, DUMMY_VAR__);
      current_statement__ = 7;
      nu = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(2, lp__, est_nu);
      Eigen::Matrix<local_scalar_t__,-1,1> pred =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      local_scalar_t__ temp = DUMMY_VAR__;
      current_statement__ = 11;
      stan::model::assign(pred, x0, "assigning variable pred",
        stan::model::index_uni(1));
      current_statement__ = 12;
      temp = 0;
      current_statement__ = 15;
      if (stan::math::logical_eq(est_drift, 1)) {
        current_statement__ = 13;
        temp = stan::model::rvalue(mu, "mu", stan::model::index_uni(1));
      }
      current_statement__ = 18;
      for (int i = 2; i <= N; ++i) {
        current_statement__ = 16;
        stan::model::assign(pred, ((temp + (phi *
          (stan::model::rvalue(pred, "pred", stan::model::index_uni((i - 1)))
          - temp))) + (sigma_process *
          stan::model::rvalue(pro_dev, "pro_dev",
            stan::model::index_uni((i - 1))))), "assigning variable pred",
          stan::model::index_uni(i));
      }
      {
        current_statement__ = 34;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(x0, 0, 10));
        current_statement__ = 35;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(phi, -0.999, 0.999));
        current_statement__ = 38;
        if (stan::math::logical_eq(est_drift, 1)) {
          current_statement__ = 36;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, 10));
        }
        current_statement__ = 41;
        if (stan::math::logical_eq(est_nu, 1)) {
          current_statement__ = 39;
          lp_accum__.add(stan::math::student_t_lpdf<propto__>(nu, 3, 2, 2));
        }
        current_statement__ = 42;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma_process, 3,
                         0, 2));
        current_statement__ = 43;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma_obs, 3, 0,
                         2));
        current_statement__ = 48;
        if (stan::math::logical_eq(est_nu, 0)) {
          current_statement__ = 46;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(pro_dev));
        } else {
          current_statement__ = 44;
          lp_accum__.add(stan::math::student_t_lpdf<propto__>(pro_dev, nu, 0,
                           1));
        }
        current_statement__ = 53;
        if (stan::math::logical_eq(family, 1)) {
          current_statement__ = 51;
          for (int i = 1; i <= n_pos; ++i) {
            current_statement__ = 49;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(pred, "pred",
                               stan::model::index_uni(
                                 stan::model::rvalue(pos_indx, "pos_indx",
                                   stan::model::index_uni(i)))), sigma_obs));
          }
        }
        current_statement__ = 58;
        if (stan::math::logical_eq(family, 2)) {
          current_statement__ = 56;
          for (int i = 1; i <= n_pos; ++i) {
            current_statement__ = 54;
            lp_accum__.add(stan::math::bernoulli_logit_lpmf<propto__>(
                             stan::model::rvalue(y_int, "y_int",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(pred, "pred",
                               stan::model::index_uni(
                                 stan::model::rvalue(pos_indx, "pos_indx",
                                   stan::model::index_uni(i))))));
          }
        }
        current_statement__ = 63;
        if (stan::math::logical_eq(family, 3)) {
          current_statement__ = 61;
          for (int i = 1; i <= n_pos; ++i) {
            current_statement__ = 59;
            lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(
                             stan::model::rvalue(y_int, "y_int",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(pred, "pred",
                               stan::model::index_uni(
                                 stan::model::rvalue(pos_indx, "pos_indx",
                                   stan::model::index_uni(i))))));
          }
        }
        current_statement__ = 68;
        if (stan::math::logical_eq(family, 4)) {
          current_statement__ = 66;
          for (int i = 1; i <= n_pos; ++i) {
            current_statement__ = 64;
            lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i)), sigma_obs,
                             (sigma_obs /
                             stan::math::exp(
                               stan::model::rvalue(pred, "pred",
                                 stan::model::index_uni(
                                   stan::model::rvalue(pos_indx, "pos_indx",
                                     stan::model::index_uni(i))))))));
          }
        }
        current_statement__ = 73;
        if (stan::math::logical_eq(family, 5)) {
          current_statement__ = 71;
          for (int i = 1; i <= n_pos; ++i) {
            current_statement__ = 69;
            lp_accum__.add(stan::math::lognormal_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(pred, "pred",
                               stan::model::index_uni(
                                 stan::model::rvalue(pos_indx, "pos_indx",
                                   stan::model::index_uni(i)))), sigma_obs));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_ss_ar_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double x0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      x0 = in__.template read<local_scalar_t__>();
      double phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      phi = in__.template read_constrain_lub<local_scalar_t__,
              jacobian__>(-0.999, 0.999, lp__);
      std::vector<double> mu =
        std::vector<double>(est_drift,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      mu = in__.template read<std::vector<local_scalar_t__>>(est_drift);
      Eigen::Matrix<double,-1,1> pro_dev =
        Eigen::Matrix<double,-1,1>::Constant(pro_dev_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      pro_dev = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(pro_dev_1dim__);
      double sigma_process = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      sigma_process = in__.template read_constrain_lb<local_scalar_t__,
                        jacobian__>(0, lp__);
      double sigma_obs = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sigma_obs = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      std::vector<double> nu =
        std::vector<double>(est_nu, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      nu = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(2, lp__, est_nu);
      Eigen::Matrix<double,-1,1> pred =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double temp = std::numeric_limits<double>::quiet_NaN();
      out__.write(x0);
      out__.write(phi);
      out__.write(mu);
      out__.write(pro_dev);
      out__.write(sigma_process);
      out__.write(sigma_obs);
      out__.write(nu);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 11;
      stan::model::assign(pred, x0, "assigning variable pred",
        stan::model::index_uni(1));
      current_statement__ = 12;
      temp = 0;
      current_statement__ = 15;
      if (stan::math::logical_eq(est_drift, 1)) {
        current_statement__ = 13;
        temp = stan::model::rvalue(mu, "mu", stan::model::index_uni(1));
      }
      current_statement__ = 18;
      for (int i = 2; i <= N; ++i) {
        current_statement__ = 16;
        stan::model::assign(pred, ((temp + (phi *
          (stan::model::rvalue(pred, "pred", stan::model::index_uni((i - 1)))
          - temp))) + (sigma_process *
          stan::model::rvalue(pro_dev, "pro_dev",
            stan::model::index_uni((i - 1))))), "assigning variable pred",
          stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(pred);
        out__.write(temp);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(n_pos,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 21;
      if (stan::math::logical_eq(family, 1)) {
        current_statement__ = 20;
        for (int n = 1; n <= n_pos; ++n) {
          current_statement__ = 19;
          stan::model::assign(log_lik,
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(pred, "pred",
                stan::model::index_uni(
                  stan::model::rvalue(pos_indx, "pos_indx",
                    stan::model::index_uni(n)))), sigma_obs),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 24;
      if (stan::math::logical_eq(family, 2)) {
        current_statement__ = 23;
        for (int n = 1; n <= n_pos; ++n) {
          current_statement__ = 22;
          stan::model::assign(log_lik,
            stan::math::bernoulli_lpmf<false>(
              stan::model::rvalue(y_int, "y_int", stan::model::index_uni(n)),
              stan::math::inv_logit(
                stan::model::rvalue(pred, "pred",
                  stan::model::index_uni(
                    stan::model::rvalue(pos_indx, "pos_indx",
                      stan::model::index_uni(n)))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 27;
      if (stan::math::logical_eq(family, 3)) {
        current_statement__ = 26;
        for (int n = 1; n <= n_pos; ++n) {
          current_statement__ = 25;
          stan::model::assign(log_lik,
            stan::math::poisson_lpmf<false>(
              stan::model::rvalue(y_int, "y_int", stan::model::index_uni(n)),
              stan::math::exp(
                stan::model::rvalue(pred, "pred",
                  stan::model::index_uni(
                    stan::model::rvalue(pos_indx, "pos_indx",
                      stan::model::index_uni(n)))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 30;
      if (stan::math::logical_eq(family, 4)) {
        current_statement__ = 29;
        for (int n = 1; n <= n_pos; ++n) {
          current_statement__ = 28;
          stan::model::assign(log_lik,
            stan::math::gamma_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              sigma_obs, (sigma_obs /
              stan::math::exp(
                stan::model::rvalue(pred, "pred",
                  stan::model::index_uni(
                    stan::model::rvalue(pos_indx, "pos_indx",
                      stan::model::index_uni(n))))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 33;
      if (stan::math::logical_eq(family, 5)) {
        current_statement__ = 32;
        for (int n = 1; n <= n_pos; ++n) {
          current_statement__ = 31;
          stan::model::assign(log_lik,
            stan::math::lognormal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(pred, "pred",
                stan::model::index_uni(
                  stan::model::rvalue(pos_indx, "pos_indx",
                    stan::model::index_uni(n)))), sigma_obs),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ x0 = DUMMY_VAR__;
      current_statement__ = 1;
      x0 = in__.read<local_scalar_t__>();
      out__.write(x0);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = in__.read<local_scalar_t__>();
      out__.write_free_lub(-0.999, 0.999, phi);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(est_drift, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(mu,
        in__.read<std::vector<local_scalar_t__>>(est_drift),
        "assigning variable mu");
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> pro_dev =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(pro_dev_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(pro_dev,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(pro_dev_1dim__),
        "assigning variable pro_dev");
      out__.write(pro_dev);
      local_scalar_t__ sigma_process = DUMMY_VAR__;
      current_statement__ = 5;
      sigma_process = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_process);
      local_scalar_t__ sigma_obs = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_obs = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_obs);
      std::vector<local_scalar_t__> nu =
        std::vector<local_scalar_t__>(est_nu, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(nu,
        in__.read<std::vector<local_scalar_t__>>(est_nu),
        "assigning variable nu");
      out__.write_free_lb(2, nu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "x0", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(est_drift)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "pro_dev",
        "double", std::vector<size_t>{static_cast<size_t>(pro_dev_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "sigma_process",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigma_obs",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "nu", "double",
        std::vector<size_t>{static_cast<size_t>(est_nu)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ x0 = DUMMY_VAR__;
      current_statement__ = 1;
      x0 = context__.vals_r("x0")[(1 - 1)];
      out__.write(x0);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 2;
      phi = context__.vals_r("phi")[(1 - 1)];
      out__.write_free_lub(-0.999, 0.999, phi);
      std::vector<local_scalar_t__> mu =
        std::vector<local_scalar_t__>(est_drift, DUMMY_VAR__);
      current_statement__ = 3;
      mu = context__.vals_r("mu");
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> pro_dev =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(pro_dev_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> pro_dev_flat__;
        current_statement__ = 4;
        pro_dev_flat__ = context__.vals_r("pro_dev");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= pro_dev_1dim__; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(pro_dev, pro_dev_flat__[(pos__ - 1)],
            "assigning variable pro_dev", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(pro_dev);
      local_scalar_t__ sigma_process = DUMMY_VAR__;
      current_statement__ = 5;
      sigma_process = context__.vals_r("sigma_process")[(1 - 1)];
      out__.write_free_lb(0, sigma_process);
      local_scalar_t__ sigma_obs = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_obs = context__.vals_r("sigma_obs")[(1 - 1)];
      out__.write_free_lb(0, sigma_obs);
      std::vector<local_scalar_t__> nu =
        std::vector<local_scalar_t__>(est_nu, DUMMY_VAR__);
      current_statement__ = 7;
      nu = context__.vals_r("nu");
      out__.write_free_lb(2, nu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"x0", "phi", "mu", "pro_dev",
                "sigma_process", "sigma_obs", "nu"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"pred", "temp"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(est_drift)},
                std::vector<size_t>{static_cast<size_t>(pro_dev_1dim__)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(est_nu)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_pos)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "x0");
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= est_drift; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= pro_dev_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "pro_dev" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_process");
    param_names__.emplace_back(std::string() + "sigma_obs");
    for (int sym1__ = 1; sym1__ <= est_nu; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "pred" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "temp");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "x0");
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= est_drift; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= pro_dev_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "pro_dev" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_process");
    param_names__.emplace_back(std::string() + "sigma_obs");
    for (int sym1__ = 1; sym1__ <= est_nu; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "pred" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "temp");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"x0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_drift) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pro_dev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(pro_dev_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_process\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_nu) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"temp\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_pos) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"x0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_drift) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pro_dev\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(pro_dev_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_process\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(est_nu) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"temp\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_pos) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((1 + 1) + est_drift) + pro_dev_1dim__) +
      1) + 1) + est_nu);
    const size_t num_transformed = emit_transformed_parameters * ((N + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (n_pos);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((1 + 1) + est_drift) + pro_dev_1dim__) +
      1) + 1) + est_nu);
    const size_t num_transformed = emit_transformed_parameters * ((N + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (n_pos);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_ss_ar_namespace::model_ss_ar;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ss_ar_namespace::profiles__;
}
#endif
#endif
