// Generated by rstantools.  Do not edit by hand.

/*
    atsarpackage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    atsarpackage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with atsarpackage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_dfa_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dfa");
    reader.add_event(127, 125, "end", "model_dfa");
    return reader;
}
#include <stan_meta_header.hpp>
class model_dfa
  : public stan::model::model_base_crtp<model_dfa> {
private:
        int N;
        int P;
        int K;
        int nZ;
        std::vector<int> row_indx;
        std::vector<int> col_indx;
        int nVariances;
        std::vector<int> varIndx;
        int nZero;
        std::vector<int> row_indx_z;
        std::vector<int> col_indx_z;
        int n_pos;
        std::vector<int> row_indx_pos;
        std::vector<int> col_indx_pos;
        std::vector<double> y;
        int n_na;
        std::vector<int> row_indx_na;
        std::vector<int> col_indx_na;
        int num_covar;
        int num_unique_covar;
        matrix_d d_covar;
        std::vector<std::vector<int> > covar_indexing;
        int n_pcor;
        int n_loglik;
public:
    model_dfa(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_dfa(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_dfa_namespace::model_dfa";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "nZ", "int", context__.to_vec());
            nZ = int(0);
            vals_i__ = context__.vals_i("nZ");
            pos__ = 0;
            nZ = vals_i__[pos__++];
            check_greater_or_equal(function__, "nZ", nZ, 0);
            current_statement_begin__ = 6;
            validate_non_negative_index("row_indx", "nZ", nZ);
            context__.validate_dims("data initialization", "row_indx", "int", context__.to_vec(nZ));
            row_indx = std::vector<int>(nZ, int(0));
            vals_i__ = context__.vals_i("row_indx");
            pos__ = 0;
            size_t row_indx_k_0_max__ = nZ;
            for (size_t k_0__ = 0; k_0__ < row_indx_k_0_max__; ++k_0__) {
                row_indx[k_0__] = vals_i__[pos__++];
            }
            size_t row_indx_i_0_max__ = nZ;
            for (size_t i_0__ = 0; i_0__ < row_indx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "row_indx[i_0__]", row_indx[i_0__], 0);
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("col_indx", "nZ", nZ);
            context__.validate_dims("data initialization", "col_indx", "int", context__.to_vec(nZ));
            col_indx = std::vector<int>(nZ, int(0));
            vals_i__ = context__.vals_i("col_indx");
            pos__ = 0;
            size_t col_indx_k_0_max__ = nZ;
            for (size_t k_0__ = 0; k_0__ < col_indx_k_0_max__; ++k_0__) {
                col_indx[k_0__] = vals_i__[pos__++];
            }
            size_t col_indx_i_0_max__ = nZ;
            for (size_t i_0__ = 0; i_0__ < col_indx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "col_indx[i_0__]", col_indx[i_0__], 0);
            }
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "nVariances", "int", context__.to_vec());
            nVariances = int(0);
            vals_i__ = context__.vals_i("nVariances");
            pos__ = 0;
            nVariances = vals_i__[pos__++];
            check_greater_or_equal(function__, "nVariances", nVariances, 0);
            current_statement_begin__ = 9;
            validate_non_negative_index("varIndx", "P", P);
            context__.validate_dims("data initialization", "varIndx", "int", context__.to_vec(P));
            varIndx = std::vector<int>(P, int(0));
            vals_i__ = context__.vals_i("varIndx");
            pos__ = 0;
            size_t varIndx_k_0_max__ = P;
            for (size_t k_0__ = 0; k_0__ < varIndx_k_0_max__; ++k_0__) {
                varIndx[k_0__] = vals_i__[pos__++];
            }
            size_t varIndx_i_0_max__ = P;
            for (size_t i_0__ = 0; i_0__ < varIndx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "varIndx[i_0__]", varIndx[i_0__], 0);
            }
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "nZero", "int", context__.to_vec());
            nZero = int(0);
            vals_i__ = context__.vals_i("nZero");
            pos__ = 0;
            nZero = vals_i__[pos__++];
            check_greater_or_equal(function__, "nZero", nZero, 0);
            current_statement_begin__ = 11;
            validate_non_negative_index("row_indx_z", "nZero", nZero);
            context__.validate_dims("data initialization", "row_indx_z", "int", context__.to_vec(nZero));
            row_indx_z = std::vector<int>(nZero, int(0));
            vals_i__ = context__.vals_i("row_indx_z");
            pos__ = 0;
            size_t row_indx_z_k_0_max__ = nZero;
            for (size_t k_0__ = 0; k_0__ < row_indx_z_k_0_max__; ++k_0__) {
                row_indx_z[k_0__] = vals_i__[pos__++];
            }
            size_t row_indx_z_i_0_max__ = nZero;
            for (size_t i_0__ = 0; i_0__ < row_indx_z_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "row_indx_z[i_0__]", row_indx_z[i_0__], 0);
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("col_indx_z", "nZero", nZero);
            context__.validate_dims("data initialization", "col_indx_z", "int", context__.to_vec(nZero));
            col_indx_z = std::vector<int>(nZero, int(0));
            vals_i__ = context__.vals_i("col_indx_z");
            pos__ = 0;
            size_t col_indx_z_k_0_max__ = nZero;
            for (size_t k_0__ = 0; k_0__ < col_indx_z_k_0_max__; ++k_0__) {
                col_indx_z[k_0__] = vals_i__[pos__++];
            }
            size_t col_indx_z_i_0_max__ = nZero;
            for (size_t i_0__ = 0; i_0__ < col_indx_z_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "col_indx_z[i_0__]", col_indx_z[i_0__], 0);
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "n_pos", "int", context__.to_vec());
            n_pos = int(0);
            vals_i__ = context__.vals_i("n_pos");
            pos__ = 0;
            n_pos = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pos", n_pos, 0);
            current_statement_begin__ = 14;
            validate_non_negative_index("row_indx_pos", "n_pos", n_pos);
            context__.validate_dims("data initialization", "row_indx_pos", "int", context__.to_vec(n_pos));
            row_indx_pos = std::vector<int>(n_pos, int(0));
            vals_i__ = context__.vals_i("row_indx_pos");
            pos__ = 0;
            size_t row_indx_pos_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < row_indx_pos_k_0_max__; ++k_0__) {
                row_indx_pos[k_0__] = vals_i__[pos__++];
            }
            size_t row_indx_pos_i_0_max__ = n_pos;
            for (size_t i_0__ = 0; i_0__ < row_indx_pos_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "row_indx_pos[i_0__]", row_indx_pos[i_0__], 0);
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("col_indx_pos", "n_pos", n_pos);
            context__.validate_dims("data initialization", "col_indx_pos", "int", context__.to_vec(n_pos));
            col_indx_pos = std::vector<int>(n_pos, int(0));
            vals_i__ = context__.vals_i("col_indx_pos");
            pos__ = 0;
            size_t col_indx_pos_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < col_indx_pos_k_0_max__; ++k_0__) {
                col_indx_pos[k_0__] = vals_i__[pos__++];
            }
            size_t col_indx_pos_i_0_max__ = n_pos;
            for (size_t i_0__ = 0; i_0__ < col_indx_pos_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "col_indx_pos[i_0__]", col_indx_pos[i_0__], 0);
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("y", "n_pos", n_pos);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(n_pos));
            y = std::vector<double>(n_pos, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "n_na", "int", context__.to_vec());
            n_na = int(0);
            vals_i__ = context__.vals_i("n_na");
            pos__ = 0;
            n_na = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_na", n_na, 0);
            current_statement_begin__ = 18;
            validate_non_negative_index("row_indx_na", "n_na", n_na);
            context__.validate_dims("data initialization", "row_indx_na", "int", context__.to_vec(n_na));
            row_indx_na = std::vector<int>(n_na, int(0));
            vals_i__ = context__.vals_i("row_indx_na");
            pos__ = 0;
            size_t row_indx_na_k_0_max__ = n_na;
            for (size_t k_0__ = 0; k_0__ < row_indx_na_k_0_max__; ++k_0__) {
                row_indx_na[k_0__] = vals_i__[pos__++];
            }
            size_t row_indx_na_i_0_max__ = n_na;
            for (size_t i_0__ = 0; i_0__ < row_indx_na_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "row_indx_na[i_0__]", row_indx_na[i_0__], 0);
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("col_indx_na", "n_na", n_na);
            context__.validate_dims("data initialization", "col_indx_na", "int", context__.to_vec(n_na));
            col_indx_na = std::vector<int>(n_na, int(0));
            vals_i__ = context__.vals_i("col_indx_na");
            pos__ = 0;
            size_t col_indx_na_k_0_max__ = n_na;
            for (size_t k_0__ = 0; k_0__ < col_indx_na_k_0_max__; ++k_0__) {
                col_indx_na[k_0__] = vals_i__[pos__++];
            }
            size_t col_indx_na_i_0_max__ = n_na;
            for (size_t i_0__ = 0; i_0__ < col_indx_na_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "col_indx_na[i_0__]", col_indx_na[i_0__], 0);
            }
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "num_covar", "int", context__.to_vec());
            num_covar = int(0);
            vals_i__ = context__.vals_i("num_covar");
            pos__ = 0;
            num_covar = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_covar", num_covar, 0);
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "num_unique_covar", "int", context__.to_vec());
            num_unique_covar = int(0);
            vals_i__ = context__.vals_i("num_unique_covar");
            pos__ = 0;
            num_unique_covar = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_unique_covar", num_unique_covar, 0);
            current_statement_begin__ = 22;
            validate_non_negative_index("d_covar", "num_covar", num_covar);
            validate_non_negative_index("d_covar", "N", N);
            context__.validate_dims("data initialization", "d_covar", "matrix_d", context__.to_vec(num_covar,N));
            d_covar = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_covar, N);
            vals_r__ = context__.vals_r("d_covar");
            pos__ = 0;
            size_t d_covar_j_2_max__ = N;
            size_t d_covar_j_1_max__ = num_covar;
            for (size_t j_2__ = 0; j_2__ < d_covar_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < d_covar_j_1_max__; ++j_1__) {
                    d_covar(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("covar_indexing", "P", P);
            validate_non_negative_index("covar_indexing", "num_covar", num_covar);
            context__.validate_dims("data initialization", "covar_indexing", "int", context__.to_vec(P,num_covar));
            covar_indexing = std::vector<std::vector<int> >(P, std::vector<int>(num_covar, int(0)));
            vals_i__ = context__.vals_i("covar_indexing");
            pos__ = 0;
            size_t covar_indexing_k_0_max__ = P;
            size_t covar_indexing_k_1_max__ = num_covar;
            for (size_t k_1__ = 0; k_1__ < covar_indexing_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < covar_indexing_k_0_max__; ++k_0__) {
                    covar_indexing[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 26;
            n_pcor = int(0);
            stan::math::fill(n_pcor, std::numeric_limits<int>::min());
            current_statement_begin__ = 27;
            n_loglik = int(0);
            stan::math::fill(n_loglik, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 28;
            stan::math::assign(n_loglik, P);
            current_statement_begin__ = 29;
            stan::math::assign(n_pcor, P);
            current_statement_begin__ = 30;
            if (as_bool(logical_lt(nVariances, 2))) {
                current_statement_begin__ = 31;
                stan::math::assign(n_pcor, 2);
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 35;
            validate_non_negative_index("x", "K", K);
            validate_non_negative_index("x", "N", N);
            num_params_r__ += (K * N);
            current_statement_begin__ = 36;
            validate_non_negative_index("z", "nZ", nZ);
            num_params_r__ += nZ;
            current_statement_begin__ = 37;
            validate_non_negative_index("zpos", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 38;
            validate_non_negative_index("sigma", "nVariances", nVariances);
            num_params_r__ += (1 * nVariances);
            current_statement_begin__ = 39;
            validate_non_negative_index("ymiss", "n_na", n_na);
            num_params_r__ += (1 * n_na);
            current_statement_begin__ = 40;
            validate_non_negative_index("D", "num_unique_covar", num_unique_covar);
            num_params_r__ += num_unique_covar;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_dfa() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 35;
        if (!(context__.contains_r("x")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable x missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("x");
        pos__ = 0U;
        validate_non_negative_index("x", "K", K);
        validate_non_negative_index("x", "N", N);
        context__.validate_dims("parameter initialization", "x", "matrix_d", context__.to_vec(K,N));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x(K, N);
        size_t x_j_2_max__ = N;
        size_t x_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                x(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(x);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable x: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "nZ", nZ);
        context__.validate_dims("parameter initialization", "z", "vector_d", context__.to_vec(nZ));
        Eigen::Matrix<double, Eigen::Dynamic, 1> z(nZ);
        size_t z_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            z(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(z);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("zpos")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zpos missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zpos");
        pos__ = 0U;
        validate_non_negative_index("zpos", "K", K);
        context__.validate_dims("parameter initialization", "zpos", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zpos(K);
        size_t zpos_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < zpos_j_1_max__; ++j_1__) {
            zpos(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, zpos);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zpos: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "nVariances", nVariances);
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(nVariances));
        std::vector<double> sigma(nVariances, double(0));
        size_t sigma_k_0_max__ = nVariances;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = nVariances;
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("ymiss")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ymiss missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ymiss");
        pos__ = 0U;
        validate_non_negative_index("ymiss", "n_na", n_na);
        context__.validate_dims("parameter initialization", "ymiss", "double", context__.to_vec(n_na));
        std::vector<double> ymiss(n_na, double(0));
        size_t ymiss_k_0_max__ = n_na;
        for (size_t k_0__ = 0; k_0__ < ymiss_k_0_max__; ++k_0__) {
            ymiss[k_0__] = vals_r__[pos__++];
        }
        size_t ymiss_i_0_max__ = n_na;
        for (size_t i_0__ = 0; i_0__ < ymiss_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(ymiss[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ymiss: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("D")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable D missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("D");
        pos__ = 0U;
        validate_non_negative_index("D", "num_unique_covar", num_unique_covar);
        context__.validate_dims("parameter initialization", "D", "vector_d", context__.to_vec(num_unique_covar));
        Eigen::Matrix<double, Eigen::Dynamic, 1> D(num_unique_covar);
        size_t D_j_1_max__ = num_unique_covar;
        for (size_t j_1__ = 0; j_1__ < D_j_1_max__; ++j_1__) {
            D(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(D);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable D: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 35;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> x;
            (void) x;  // dummy to suppress unused var warning
            if (jacobian__)
                x = in__.matrix_constrain(K, N, lp__);
            else
                x = in__.matrix_constrain(K, N);
            current_statement_begin__ = 36;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z;
            (void) z;  // dummy to suppress unused var warning
            if (jacobian__)
                z = in__.vector_constrain(nZ, lp__);
            else
                z = in__.vector_constrain(nZ);
            current_statement_begin__ = 37;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zpos;
            (void) zpos;  // dummy to suppress unused var warning
            if (jacobian__)
                zpos = in__.vector_lb_constrain(0, K, lp__);
            else
                zpos = in__.vector_lb_constrain(0, K);
            current_statement_begin__ = 38;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = nVariances;
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 39;
            std::vector<local_scalar_t__> ymiss;
            size_t ymiss_d_0_max__ = n_na;
            ymiss.reserve(ymiss_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ymiss_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ymiss.push_back(in__.scalar_constrain(lp__));
                else
                    ymiss.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 40;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> D;
            (void) D;  // dummy to suppress unused var warning
            if (jacobian__)
                D = in__.vector_constrain(num_unique_covar, lp__);
            else
                D = in__.vector_constrain(num_unique_covar);
            // transformed parameters
            current_statement_begin__ = 43;
            validate_non_negative_index("pred", "P", P);
            validate_non_negative_index("pred", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> pred(P, N);
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("Z", "P", P);
            validate_non_negative_index("Z", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Z(P, K);
            stan::math::initialize(Z, DUMMY_VAR__);
            stan::math::fill(Z, DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("yall", "P", P);
            validate_non_negative_index("yall", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> yall(P, N);
            stan::math::initialize(yall, DUMMY_VAR__);
            stan::math::fill(yall, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("sigma_vec", "P", P);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_vec(P);
            stan::math::initialize(sigma_vec, DUMMY_VAR__);
            stan::math::fill(sigma_vec, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 49;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 50;
                stan::model::assign(sigma_vec, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            get_base1(sigma, get_base1(varIndx, p, "varIndx", 1), "sigma", 1), 
                            "assigning variable sigma_vec");
            }
            current_statement_begin__ = 54;
            for (int i = 1; i <= n_pos; ++i) {
                current_statement_begin__ = 55;
                stan::model::assign(yall, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_pos, i, "row_indx_pos", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_pos, i, "col_indx_pos", 1)), stan::model::nil_index_list())), 
                            get_base1(y, i, "y", 1), 
                            "assigning variable yall");
            }
            current_statement_begin__ = 58;
            if (as_bool(logical_gt(n_na, 0))) {
                current_statement_begin__ = 59;
                for (int i = 1; i <= n_na; ++i) {
                    current_statement_begin__ = 60;
                    stan::model::assign(yall, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_na, i, "row_indx_na", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_na, i, "col_indx_na", 1)), stan::model::nil_index_list())), 
                                get_base1(ymiss, i, "ymiss", 1), 
                                "assigning variable yall");
                }
            }
            current_statement_begin__ = 64;
            for (int i = 1; i <= nZ; ++i) {
                current_statement_begin__ = 65;
                stan::model::assign(Z, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(row_indx, i, "row_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx, i, "col_indx", 1)), stan::model::nil_index_list())), 
                            get_base1(z, i, "z", 1), 
                            "assigning variable Z");
            }
            current_statement_begin__ = 68;
            if (as_bool(logical_gt(nZero, 2))) {
                current_statement_begin__ = 69;
                for (int i = 1; i <= (nZero - 2); ++i) {
                    current_statement_begin__ = 70;
                    stan::model::assign(Z, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_z, i, "row_indx_z", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_z, i, "col_indx_z", 1)), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable Z");
                }
            }
            current_statement_begin__ = 74;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 75;
                stan::model::assign(Z, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            get_base1(zpos, k, "zpos", 1), 
                            "assigning variable Z");
            }
            current_statement_begin__ = 79;
            stan::math::assign(pred, multiply(Z, x));
            current_statement_begin__ = 82;
            if (as_bool(logical_gt(num_covar, 0))) {
                current_statement_begin__ = 83;
                for (int p = 1; p <= P; ++p) {
                    current_statement_begin__ = 84;
                    for (int n = 1; n <= N; ++n) {
                        current_statement_begin__ = 85;
                        for (int k = 1; k <= num_covar; ++k) {
                            current_statement_begin__ = 86;
                            if (as_bool(logical_gt(get_base1(get_base1(covar_indexing, p, "covar_indexing", 1), k, "covar_indexing", 2), 0))) {
                                current_statement_begin__ = 87;
                                stan::model::assign(pred, 
                                            stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                            (get_base1(pred, p, n, "pred", 1) + (get_base1(d_covar, k, n, "d_covar", 1) * get_base1(D, get_base1(get_base1(covar_indexing, p, "covar_indexing", 1), k, "covar_indexing", 2), "D", 1))), 
                                            "assigning variable pred");
                            }
                        }
                    }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 43;
            size_t pred_j_1_max__ = P;
            size_t pred_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(pred(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: pred" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 44;
            size_t Z_j_1_max__ = P;
            size_t Z_j_2_max__ = K;
            for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Z(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Z" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Z: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 46;
            size_t yall_j_1_max__ = P;
            size_t yall_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < yall_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < yall_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(yall(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: yall" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable yall: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 47;
            size_t sigma_vec_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < sigma_vec_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma_vec(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma_vec" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma_vec: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 96;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 97;
                lp_accum__.add(cauchy_log<propto__>(get_base1(x, k, 1, "x", 1), 0, 3));
                current_statement_begin__ = 98;
                for (int t = 2; t <= N; ++t) {
                    current_statement_begin__ = 99;
                    lp_accum__.add(normal_log<propto__>(get_base1(x, k, t, "x", 1), get_base1(x, k, (t - 1), "x", 1), 1));
                }
            }
            current_statement_begin__ = 104;
            if (as_bool(logical_gt(num_covar, 0))) {
                current_statement_begin__ = 105;
                lp_accum__.add(normal_log<propto__>(D, 0, 1));
            }
            current_statement_begin__ = 108;
            lp_accum__.add(normal_log<propto__>(z, 0, 1));
            current_statement_begin__ = 109;
            lp_accum__.add(normal_log<propto__>(zpos, 0, 1));
            current_statement_begin__ = 111;
            lp_accum__.add(student_t_log<propto__>(sigma, 3, 0, 2));
            current_statement_begin__ = 114;
            for (int i = 1; i <= P; ++i) {
                current_statement_begin__ = 115;
                lp_accum__.add(normal_log(get_base1(yall, i, "yall", 1), get_base1(pred, i, "pred", 1), get_base1(sigma_vec, i, "sigma_vec", 1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("x");
        names__.push_back("z");
        names__.push_back("zpos");
        names__.push_back("sigma");
        names__.push_back("ymiss");
        names__.push_back("D");
        names__.push_back("pred");
        names__.push_back("Z");
        names__.push_back("yall");
        names__.push_back("sigma_vec");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nZ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nVariances);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_na);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_unique_covar);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_loglik);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dfa_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x = in__.matrix_constrain(K, N);
        size_t x_j_2_max__ = N;
        size_t x_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                vars__.push_back(x(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> z = in__.vector_constrain(nZ);
        size_t z_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            vars__.push_back(z(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> zpos = in__.vector_lb_constrain(0, K);
        size_t zpos_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < zpos_j_1_max__; ++j_1__) {
            vars__.push_back(zpos(j_1__));
        }
        std::vector<double> sigma;
        size_t sigma_d_0_max__ = nVariances;
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_k_0_max__ = nVariances;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        std::vector<double> ymiss;
        size_t ymiss_d_0_max__ = n_na;
        ymiss.reserve(ymiss_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ymiss_d_0_max__; ++d_0__) {
            ymiss.push_back(in__.scalar_constrain());
        }
        size_t ymiss_k_0_max__ = n_na;
        for (size_t k_0__ = 0; k_0__ < ymiss_k_0_max__; ++k_0__) {
            vars__.push_back(ymiss[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> D = in__.vector_constrain(num_unique_covar);
        size_t D_j_1_max__ = num_unique_covar;
        for (size_t j_1__ = 0; j_1__ < D_j_1_max__; ++j_1__) {
            vars__.push_back(D(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 43;
            validate_non_negative_index("pred", "P", P);
            validate_non_negative_index("pred", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> pred(P, N);
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("Z", "P", P);
            validate_non_negative_index("Z", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Z(P, K);
            stan::math::initialize(Z, DUMMY_VAR__);
            stan::math::fill(Z, DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("yall", "P", P);
            validate_non_negative_index("yall", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> yall(P, N);
            stan::math::initialize(yall, DUMMY_VAR__);
            stan::math::fill(yall, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("sigma_vec", "P", P);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_vec(P);
            stan::math::initialize(sigma_vec, DUMMY_VAR__);
            stan::math::fill(sigma_vec, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 49;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 50;
                stan::model::assign(sigma_vec, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            get_base1(sigma, get_base1(varIndx, p, "varIndx", 1), "sigma", 1), 
                            "assigning variable sigma_vec");
            }
            current_statement_begin__ = 54;
            for (int i = 1; i <= n_pos; ++i) {
                current_statement_begin__ = 55;
                stan::model::assign(yall, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_pos, i, "row_indx_pos", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_pos, i, "col_indx_pos", 1)), stan::model::nil_index_list())), 
                            get_base1(y, i, "y", 1), 
                            "assigning variable yall");
            }
            current_statement_begin__ = 58;
            if (as_bool(logical_gt(n_na, 0))) {
                current_statement_begin__ = 59;
                for (int i = 1; i <= n_na; ++i) {
                    current_statement_begin__ = 60;
                    stan::model::assign(yall, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_na, i, "row_indx_na", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_na, i, "col_indx_na", 1)), stan::model::nil_index_list())), 
                                get_base1(ymiss, i, "ymiss", 1), 
                                "assigning variable yall");
                }
            }
            current_statement_begin__ = 64;
            for (int i = 1; i <= nZ; ++i) {
                current_statement_begin__ = 65;
                stan::model::assign(Z, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(row_indx, i, "row_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx, i, "col_indx", 1)), stan::model::nil_index_list())), 
                            get_base1(z, i, "z", 1), 
                            "assigning variable Z");
            }
            current_statement_begin__ = 68;
            if (as_bool(logical_gt(nZero, 2))) {
                current_statement_begin__ = 69;
                for (int i = 1; i <= (nZero - 2); ++i) {
                    current_statement_begin__ = 70;
                    stan::model::assign(Z, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(row_indx_z, i, "row_indx_z", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(col_indx_z, i, "col_indx_z", 1)), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable Z");
                }
            }
            current_statement_begin__ = 74;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 75;
                stan::model::assign(Z, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            get_base1(zpos, k, "zpos", 1), 
                            "assigning variable Z");
            }
            current_statement_begin__ = 79;
            stan::math::assign(pred, multiply(Z, x));
            current_statement_begin__ = 82;
            if (as_bool(logical_gt(num_covar, 0))) {
                current_statement_begin__ = 83;
                for (int p = 1; p <= P; ++p) {
                    current_statement_begin__ = 84;
                    for (int n = 1; n <= N; ++n) {
                        current_statement_begin__ = 85;
                        for (int k = 1; k <= num_covar; ++k) {
                            current_statement_begin__ = 86;
                            if (as_bool(logical_gt(get_base1(get_base1(covar_indexing, p, "covar_indexing", 1), k, "covar_indexing", 2), 0))) {
                                current_statement_begin__ = 87;
                                stan::model::assign(pred, 
                                            stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                            (get_base1(pred, p, n, "pred", 1) + (get_base1(d_covar, k, n, "d_covar", 1) * get_base1(D, get_base1(get_base1(covar_indexing, p, "covar_indexing", 1), k, "covar_indexing", 2), "D", 1))), 
                                            "assigning variable pred");
                            }
                        }
                    }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t pred_j_2_max__ = N;
                size_t pred_j_1_max__ = P;
                for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                        vars__.push_back(pred(j_1__, j_2__));
                    }
                }
                size_t Z_j_2_max__ = K;
                size_t Z_j_1_max__ = P;
                for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                        vars__.push_back(Z(j_1__, j_2__));
                    }
                }
                size_t yall_j_2_max__ = N;
                size_t yall_j_1_max__ = P;
                for (size_t j_2__ = 0; j_2__ < yall_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < yall_j_1_max__; ++j_1__) {
                        vars__.push_back(yall(j_1__, j_2__));
                    }
                }
                size_t sigma_vec_j_1_max__ = P;
                for (size_t j_1__ = 0; j_1__ < sigma_vec_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma_vec(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 120;
            validate_non_negative_index("log_lik", "n_loglik", n_loglik);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n_loglik);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 122;
            for (int i = 1; i <= P; ++i) {
                current_statement_begin__ = 123;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_log(get_base1(yall, i, "yall", 1), get_base1(pred, i, "pred", 1), get_base1(sigma_vec, i, "sigma_vec", 1)), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 120;
            size_t log_lik_j_1_max__ = n_loglik;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_dfa";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t x_j_2_max__ = N;
        size_t x_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t z_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zpos_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < zpos_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zpos" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_k_0_max__ = nVariances;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ymiss_k_0_max__ = n_na;
        for (size_t k_0__ = 0; k_0__ < ymiss_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ymiss" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t D_j_1_max__ = num_unique_covar;
        for (size_t j_1__ = 0; j_1__ < D_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "D" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t pred_j_2_max__ = N;
            size_t pred_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Z_j_2_max__ = K;
            size_t Z_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t yall_j_2_max__ = N;
            size_t yall_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < yall_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < yall_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "yall" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sigma_vec_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < sigma_vec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_vec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n_loglik;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t x_j_2_max__ = N;
        size_t x_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t z_j_1_max__ = nZ;
        for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zpos_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < zpos_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zpos" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_k_0_max__ = nVariances;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ymiss_k_0_max__ = n_na;
        for (size_t k_0__ = 0; k_0__ < ymiss_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ymiss" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t D_j_1_max__ = num_unique_covar;
        for (size_t j_1__ = 0; j_1__ < D_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "D" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t pred_j_2_max__ = N;
            size_t pred_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Z_j_2_max__ = K;
            size_t Z_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t yall_j_2_max__ = N;
            size_t yall_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < yall_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < yall_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "yall" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sigma_vec_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < sigma_vec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_vec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n_loglik;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_dfa_namespace::model_dfa stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
