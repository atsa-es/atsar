// Generated by rstantools.  Do not edit by hand.

/*
    atsarpackage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    atsarpackage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with atsarpackage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_marss_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 149> locations_array__ =
  {" (found before start of program)",
  " (in 'marss', line 24, column 2 to column 15)",
  " (in 'marss', line 25, column 2 to column 25)",
  " (in 'marss', line 26, column 2 to column 33)",
  " (in 'marss', line 27, column 2 to column 28)",
  " (in 'marss', line 28, column 2 to column 16)",
  " (in 'marss', line 29, column 2 to column 33)",
  " (in 'marss', line 30, column 2 to column 36)",
  " (in 'marss', line 33, column 2 to column 20)",
  " (in 'marss', line 34, column 2 to column 17)",
  " (in 'marss', line 36, column 2 to column 19)",
  " (in 'marss', line 37, column 2 to column 17)",
  " (in 'marss', line 38, column 2 to column 17)",
  " (in 'marss', line 114, column 2 to column 24)",
  " (in 'marss', line 40, column 16 to column 28)",
  " (in 'marss', line 40, column 2 to column 28)",
  " (in 'marss', line 41, column 18 to column 40)",
  " (in 'marss', line 41, column 2 to column 40)",
  " (in 'marss', line 47, column 6 to column 18)",
  " (in 'marss', line 46, column 11 to line 48, column 5)",
  " (in 'marss', line 45, column 6 to column 29)",
  " (in 'marss', line 44, column 18 to line 46, column 5)",
  " (in 'marss', line 44, column 4 to line 48, column 5)",
  " (in 'marss', line 43, column 16 to line 49, column 3)",
  " (in 'marss', line 43, column 2 to line 49, column 3)",
  " (in 'marss', line 55, column 8 to column 22)",
  " (in 'marss', line 54, column 13 to line 56, column 7)",
  " (in 'marss', line 53, column 8 to column 22)",
  " (in 'marss', line 52, column 15 to line 54, column 7)",
  " (in 'marss', line 52, column 6 to line 56, column 7)",
  " (in 'marss', line 51, column 18 to line 57, column 5)",
  " (in 'marss', line 51, column 4 to line 57, column 5)",
  " (in 'marss', line 50, column 16 to line 58, column 3)",
  " (in 'marss', line 50, column 2 to line 58, column 3)",
  " (in 'marss', line 59, column 12 to column 21)",
  " (in 'marss', line 59, column 2 to column 21)",
  " (in 'marss', line 61, column 2 to column 13)",
  " (in 'marss', line 63, column 4 to column 43)",
  " (in 'marss', line 65, column 6 to column 27)",
  " (in 'marss', line 64, column 23 to line 66, column 5)",
  " (in 'marss', line 64, column 4 to line 66, column 5)",
  " (in 'marss', line 62, column 16 to line 67, column 3)",
  " (in 'marss', line 62, column 2 to line 67, column 3)",
  " (in 'marss', line 71, column 6 to column 43)",
  " (in 'marss', line 70, column 18 to line 72, column 5)",
  " (in 'marss', line 70, column 4 to line 72, column 5)",
  " (in 'marss', line 69, column 16 to line 73, column 3)",
  " (in 'marss', line 69, column 2 to line 73, column 3)",
  " (in 'marss', line 116, column 35 to column 149)",
  " (in 'marss', line 116, column 16 to column 149)",
  " (in 'marss', line 116, column 2 to column 149)",
  " (in 'marss', line 117, column 35 to column 125)",
  " (in 'marss', line 117, column 16 to column 125)",
  " (in 'marss', line 117, column 2 to column 125)",
  " (in 'marss', line 118, column 35 to column 117)",
  " (in 'marss', line 118, column 16 to column 117)",
  " (in 'marss', line 118, column 2 to column 117)",
  " (in 'marss', line 119, column 35 to column 197)",
  " (in 'marss', line 119, column 16 to column 197)",
  " (in 'marss', line 119, column 2 to column 197)",
  " (in 'marss', line 120, column 35 to column 152)",
  " (in 'marss', line 120, column 16 to column 152)",
  " (in 'marss', line 120, column 2 to column 152)",
  " (in 'marss', line 76, column 2 to column 20)",
  " (in 'marss', line 77, column 2 to column 19)",
  " (in 'marss', line 80, column 4 to column 36)",
  " (in 'marss', line 79, column 23 to line 81, column 3)",
  " (in 'marss', line 79, column 2 to line 81, column 3)",
  " (in 'marss', line 83, column 4 to column 40)",
  " (in 'marss', line 82, column 23 to line 84, column 3)",
  " (in 'marss', line 82, column 2 to line 84, column 3)",
  " (in 'marss', line 87, column 6 to column 25)",
  " (in 'marss', line 86, column 25 to line 88, column 5)",
  " (in 'marss', line 86, column 4 to line 88, column 5)",
  " (in 'marss', line 85, column 18 to line 89, column 3)",
  " (in 'marss', line 85, column 2 to line 89, column 3)",
  " (in 'marss', line 91, column 4 to column 59)",
  " (in 'marss', line 90, column 16 to line 92, column 3)",
  " (in 'marss', line 90, column 2 to line 92, column 3)",
  " (in 'marss', line 99, column 10 to column 31)",
  " (in 'marss', line 98, column 15 to line 100, column 9)",
  " (in 'marss', line 97, column 10 to column 32)",
  " (in 'marss', line 96, column 17 to line 98, column 9)",
  " (in 'marss', line 96, column 8 to line 100, column 9)",
  " (in 'marss', line 95, column 20 to line 101, column 7)",
  " (in 'marss', line 95, column 6 to line 101, column 7)",
  " (in 'marss', line 94, column 18 to line 102, column 5)",
  " (in 'marss', line 94, column 4 to line 102, column 5)",
  " (in 'marss', line 93, column 16 to line 103, column 3)",
  " (in 'marss', line 93, column 2 to line 103, column 3)",
  " (in 'marss', line 106, column 18 to column 114)",
  " (in 'marss', line 106, column 4 to column 114)",
  " (in 'marss', line 107, column 18 to column 85)",
  " (in 'marss', line 107, column 4 to column 85)",
  " (in 'marss', line 108, column 18 to column 81)",
  " (in 'marss', line 108, column 4 to column 81)",
  " (in 'marss', line 109, column 18 to column 157)",
  " (in 'marss', line 109, column 4 to column 157)",
  " (in 'marss', line 110, column 18 to column 117)",
  " (in 'marss', line 110, column 4 to column 117)",
  " (in 'marss', line 105, column 20 to line 111, column 3)",
  " (in 'marss', line 105, column 2 to line 111, column 3)",
  " (in 'marss', line 2, column 2 to column 17)",
  " (in 'marss', line 3, column 2 to column 17)",
  " (in 'marss', line 4, column 22 to column 23)",
  " (in 'marss', line 4, column 2 to column 25)",
  " (in 'marss', line 5, column 2 to column 17)",
  " (in 'marss', line 6, column 28 to column 29)",
  " (in 'marss', line 6, column 2 to column 31)",
  " (in 'marss', line 7, column 2 to column 24)",
  " (in 'marss', line 8, column 28 to column 31)",
  " (in 'marss', line 8, column 2 to column 33)",
  " (in 'marss', line 9, column 2 to column 24)",
  " (in 'marss', line 10, column 22 to column 25)",
  " (in 'marss', line 10, column 2 to column 27)",
  " (in 'marss', line 11, column 2 to column 24)",
  " (in 'marss', line 12, column 2 to column 21)",
  " (in 'marss', line 13, column 28 to column 33)",
  " (in 'marss', line 13, column 2 to column 35)",
  " (in 'marss', line 14, column 28 to column 33)",
  " (in 'marss', line 14, column 2 to column 35)",
  " (in 'marss', line 15, column 2 to column 25)",
  " (in 'marss', line 16, column 2 to column 21)",
  " (in 'marss', line 17, column 2 to column 19)",
  " (in 'marss', line 18, column 21 to column 26)",
  " (in 'marss', line 18, column 2 to column 28)",
  " (in 'marss', line 19, column 9 to column 14)",
  " (in 'marss', line 19, column 2 to column 18)",
  " (in 'marss', line 20, column 12 to column 17)",
  " (in 'marss', line 20, column 2 to column 19)",
  " (in 'marss', line 21, column 2 to column 13)",
  " (in 'marss', line 24, column 9 to column 10)",
  " (in 'marss', line 25, column 20 to column 23)",
  " (in 'marss', line 25, column 9 to column 10)",
  " (in 'marss', line 26, column 9 to column 29)",
  " (in 'marss', line 27, column 9 to column 16)",
  " (in 'marss', line 27, column 17 to column 24)",
  " (in 'marss', line 28, column 9 to column 12)",
  " (in 'marss', line 29, column 30 to column 31)",
  " (in 'marss', line 30, column 26 to column 34)",
  " (in 'marss', line 33, column 17 to column 18)",
  " (in 'marss', line 33, column 9 to column 10)",
  " (in 'marss', line 34, column 14 to column 15)",
  " (in 'marss', line 34, column 9 to column 10)",
  " (in 'marss', line 36, column 9 to column 10)",
  " (in 'marss', line 36, column 11 to column 12)",
  " (in 'marss', line 37, column 9 to column 10)",
  " (in 'marss', line 38, column 9 to column 10)",
  " (in 'marss', line 114, column 9 to column 14)"};
#include <stan_meta_header.hpp>
class model_marss final : public model_base_crtp<model_marss> {
private:
  int N;
  int M;
  std::vector<int> states;
  int S;
  std::vector<int> obsVariances;
  int n_obsvar;
  std::vector<int> proVariances;
  int n_provar;
  std::vector<int> trends;
  int n_trends;
  int n_pos;
  std::vector<int> col_indx_pos;
  std::vector<int> row_indx_pos;
  int est_trend;
  int est_B;
  int n_A;
  std::vector<int> est_A;
  Eigen::Matrix<double,-1,1> y_data__;
  std::vector<int> y_int;
  int family;
  int pro_dev_1dim__;
  int U_1dim__;
  int B_1dim__;
  int B_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
public:
  ~model_marss() {}
  model_marss(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_marss_namespace::model_marss";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 102;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 102;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 103;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 103;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 103;
      stan::math::check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("states", "M", M);
      current_statement__ = 105;
      context__.validate_dims("data initialization", "states", "int",
        std::vector<size_t>{static_cast<size_t>(M)});
      states = std::vector<int>(M, std::numeric_limits<int>::min());
      current_statement__ = 105;
      states = context__.vals_i("states");
      current_statement__ = 105;
      stan::math::check_greater_or_equal(function__, "states", states, 0);
      current_statement__ = 106;
      context__.validate_dims("data initialization", "S", "int",
        std::vector<size_t>{});
      S = std::numeric_limits<int>::min();
      current_statement__ = 106;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 106;
      stan::math::check_greater_or_equal(function__, "S", S, 0);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("obsVariances", "M", M);
      current_statement__ = 108;
      context__.validate_dims("data initialization", "obsVariances", "int",
        std::vector<size_t>{static_cast<size_t>(M)});
      obsVariances = std::vector<int>(M, std::numeric_limits<int>::min());
      current_statement__ = 108;
      obsVariances = context__.vals_i("obsVariances");
      current_statement__ = 108;
      stan::math::check_greater_or_equal(function__, "obsVariances",
        obsVariances, 0);
      current_statement__ = 109;
      context__.validate_dims("data initialization", "n_obsvar", "int",
        std::vector<size_t>{});
      n_obsvar = std::numeric_limits<int>::min();
      current_statement__ = 109;
      n_obsvar = context__.vals_i("n_obsvar")[(1 - 1)];
      current_statement__ = 109;
      stan::math::check_greater_or_equal(function__, "n_obsvar", n_obsvar, 0);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("proVariances", "S + 1", (S +
        1));
      current_statement__ = 111;
      context__.validate_dims("data initialization", "proVariances", "int",
        std::vector<size_t>{static_cast<size_t>((S + 1))});
      proVariances = std::vector<int>((S + 1),
                       std::numeric_limits<int>::min());
      current_statement__ = 111;
      proVariances = context__.vals_i("proVariances");
      current_statement__ = 111;
      stan::math::check_greater_or_equal(function__, "proVariances",
        proVariances, 0);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "n_provar", "int",
        std::vector<size_t>{});
      n_provar = std::numeric_limits<int>::min();
      current_statement__ = 112;
      n_provar = context__.vals_i("n_provar")[(1 - 1)];
      current_statement__ = 112;
      stan::math::check_greater_or_equal(function__, "n_provar", n_provar, 0);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("trends", "S + 1", (S + 1));
      current_statement__ = 114;
      context__.validate_dims("data initialization", "trends", "int",
        std::vector<size_t>{static_cast<size_t>((S + 1))});
      trends = std::vector<int>((S + 1), std::numeric_limits<int>::min());
      current_statement__ = 114;
      trends = context__.vals_i("trends");
      current_statement__ = 114;
      stan::math::check_greater_or_equal(function__, "trends", trends, 0);
      current_statement__ = 115;
      context__.validate_dims("data initialization", "n_trends", "int",
        std::vector<size_t>{});
      n_trends = std::numeric_limits<int>::min();
      current_statement__ = 115;
      n_trends = context__.vals_i("n_trends")[(1 - 1)];
      current_statement__ = 115;
      stan::math::check_greater_or_equal(function__, "n_trends", n_trends, 0);
      current_statement__ = 116;
      context__.validate_dims("data initialization", "n_pos", "int",
        std::vector<size_t>{});
      n_pos = std::numeric_limits<int>::min();
      current_statement__ = 116;
      n_pos = context__.vals_i("n_pos")[(1 - 1)];
      current_statement__ = 116;
      stan::math::check_greater_or_equal(function__, "n_pos", n_pos, 0);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("col_indx_pos", "n_pos", n_pos);
      current_statement__ = 118;
      context__.validate_dims("data initialization", "col_indx_pos", "int",
        std::vector<size_t>{static_cast<size_t>(n_pos)});
      col_indx_pos = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      current_statement__ = 118;
      col_indx_pos = context__.vals_i("col_indx_pos");
      current_statement__ = 118;
      stan::math::check_greater_or_equal(function__, "col_indx_pos",
        col_indx_pos, 0);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("row_indx_pos", "n_pos", n_pos);
      current_statement__ = 120;
      context__.validate_dims("data initialization", "row_indx_pos", "int",
        std::vector<size_t>{static_cast<size_t>(n_pos)});
      row_indx_pos = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      current_statement__ = 120;
      row_indx_pos = context__.vals_i("row_indx_pos");
      current_statement__ = 120;
      stan::math::check_greater_or_equal(function__, "row_indx_pos",
        row_indx_pos, 0);
      current_statement__ = 121;
      context__.validate_dims("data initialization", "est_trend", "int",
        std::vector<size_t>{});
      est_trend = std::numeric_limits<int>::min();
      current_statement__ = 121;
      est_trend = context__.vals_i("est_trend")[(1 - 1)];
      current_statement__ = 121;
      stan::math::check_greater_or_equal(function__, "est_trend", est_trend,
        0);
      current_statement__ = 122;
      context__.validate_dims("data initialization", "est_B", "int",
        std::vector<size_t>{});
      est_B = std::numeric_limits<int>::min();
      current_statement__ = 122;
      est_B = context__.vals_i("est_B")[(1 - 1)];
      current_statement__ = 122;
      stan::math::check_greater_or_equal(function__, "est_B", est_B, 0);
      current_statement__ = 123;
      context__.validate_dims("data initialization", "n_A", "int",
        std::vector<size_t>{});
      n_A = std::numeric_limits<int>::min();
      current_statement__ = 123;
      n_A = context__.vals_i("n_A")[(1 - 1)];
      current_statement__ = 123;
      stan::math::check_greater_or_equal(function__, "n_A", n_A, 0);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("est_A", "n_A + 1", (n_A + 1));
      current_statement__ = 125;
      context__.validate_dims("data initialization", "est_A", "int",
        std::vector<size_t>{static_cast<size_t>((n_A + 1))});
      est_A = std::vector<int>((n_A + 1), std::numeric_limits<int>::min());
      current_statement__ = 125;
      est_A = context__.vals_i("est_A");
      current_statement__ = 125;
      stan::math::check_greater_or_equal(function__, "est_A", est_A, 0);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("y", "n_pos", n_pos);
      current_statement__ = 127;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n_pos)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(n_pos,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), n_pos);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 127;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 127;
        pos__ = 1;
        current_statement__ = 127;
        for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
          current_statement__ = 127;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 127;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 128;
      stan::math::validate_non_negative_index("y_int", "n_pos", n_pos);
      current_statement__ = 129;
      context__.validate_dims("data initialization", "y_int", "int",
        std::vector<size_t>{static_cast<size_t>(n_pos)});
      y_int = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      current_statement__ = 129;
      y_int = context__.vals_i("y_int");
      current_statement__ = 130;
      context__.validate_dims("data initialization", "family", "int",
        std::vector<size_t>{});
      family = std::numeric_limits<int>::min();
      current_statement__ = 130;
      family = context__.vals_i("family")[(1 - 1)];
      current_statement__ = 131;
      stan::math::validate_non_negative_index("x0", "S", S);
      current_statement__ = 132;
      pro_dev_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 132;
      pro_dev_1dim__ = (N - 1);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("pro_dev", "N - 1",
        pro_dev_1dim__);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("pro_dev", "S", S);
      current_statement__ = 134;
      U_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 134;
      U_1dim__ = (n_trends * est_trend);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("U", "n_trends * est_trend",
        U_1dim__);
      current_statement__ = 135;
      B_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 135;
      B_1dim__ = (S * est_B);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("B", "S * est_B", B_1dim__);
      current_statement__ = 136;
      B_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 136;
      B_2dim__ = (S * est_B);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("B", "S * est_B", B_2dim__);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("A", "n_A", n_A);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("sigma_process", "S", S);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("sigma_obs", "n_obsvar",
        n_obsvar);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("pred", "N", N);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("pred", "M", M);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("x", "S", S);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("Bmat", "S", S);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("Bmat", "S", S);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("Uvec", "S", S);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("Avec", "M", M);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("log_lik", "n_pos", n_pos);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = S + (pro_dev_1dim__ * S) + U_1dim__ + (B_1dim__ *
      B_2dim__) + n_A + S + n_obsvar;
  }
  inline std::string model_name() const final {
    return "model_marss";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_marss_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> x0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
      current_statement__ = 1;
      x0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(S);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> pro_dev =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(pro_dev_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__));
      current_statement__ = 2;
      pro_dev = in__.template read<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(pro_dev_1dim__,
                  S);
      Eigen::Matrix<local_scalar_t__,-1,1> U =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(U_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      U = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(U_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> B =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(B_1dim__, B_2dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      B = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(B_1dim__,
            B_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> A =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_A, DUMMY_VAR__);
      current_statement__ = 5;
      A = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_A);
      std::vector<local_scalar_t__> sigma_process =
        std::vector<local_scalar_t__>(S, DUMMY_VAR__);
      current_statement__ = 6;
      sigma_process = in__.template read_constrain_lb<
                        std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                        S);
      std::vector<local_scalar_t__> sigma_obs =
        std::vector<local_scalar_t__>(n_obsvar, DUMMY_VAR__);
      current_statement__ = 7;
      sigma_obs = in__.template read_constrain_lb<
                    std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                    n_obsvar);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> pred =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> x =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,-1> Bmat =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(S, S, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> Uvec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> Avec =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 15;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 14;
        stan::model::assign(Avec, 0, "assigning variable Avec",
          stan::model::index_uni(i));
      }
      current_statement__ = 17;
      for (int i = 1; i <= n_A; ++i) {
        current_statement__ = 16;
        stan::model::assign(Avec,
          stan::model::rvalue(A, "A", stan::model::index_uni(i)),
          "assigning variable Avec",
          stan::model::index_uni(
            stan::model::rvalue(est_A, "est_A", stan::model::index_uni(i))));
      }
      current_statement__ = 24;
      for (int i = 1; i <= S; ++i) {
        current_statement__ = 22;
        if (est_trend) {
          current_statement__ = 20;
          stan::model::assign(Uvec,
            stan::model::rvalue(U, "U",
              stan::model::index_uni(
                stan::model::rvalue(trends, "trends",
                  stan::model::index_uni(i)))), "assigning variable Uvec",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 18;
          stan::model::assign(Uvec, 0, "assigning variable Uvec",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 33;
      for (int i = 1; i <= S; ++i) {
        current_statement__ = 31;
        for (int j = 1; j <= S; ++j) {
          current_statement__ = 29;
          if (stan::math::logical_eq(i, j)) {
            current_statement__ = 27;
            stan::model::assign(Bmat, 1, "assigning variable Bmat",
              stan::model::index_uni(i), stan::model::index_uni(j));
          } else {
            current_statement__ = 25;
            stan::model::assign(Bmat, 0, "assigning variable Bmat",
              stan::model::index_uni(i), stan::model::index_uni(j));
          }
        }
      }
      current_statement__ = 35;
      if (est_B) {
        current_statement__ = 34;
        stan::model::assign(Bmat, B, "assigning variable Bmat");
      }
      current_statement__ = 36;
      stan::model::assign(x, x0, "assigning variable x",
        stan::model::index_uni(1), stan::model::index_omni());
      current_statement__ = 42;
      for (int t = 2; t <= N; ++t) {
        current_statement__ = 37;
        stan::model::assign(x,
          stan::math::add(
            stan::math::multiply(Bmat,
              stan::model::deep_copy(
                stan::model::rvalue(x, "x", stan::model::index_uni((t - 1)),
                  stan::model::index_omni()))),
            stan::model::rvalue(pro_dev, "pro_dev",
              stan::model::index_uni((t - 1)), stan::model::index_omni())),
          "assigning variable x", stan::model::index_uni(t),
          stan::model::index_omni());
        current_statement__ = 40;
        if (stan::math::logical_eq(est_trend, 1)) {
          current_statement__ = 38;
          stan::model::assign(x,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(x, "x", stan::model::index_uni(t),
                  stan::model::index_omni())), Uvec), "assigning variable x",
            stan::model::index_uni(t), stan::model::index_omni());
        }
      }
      current_statement__ = 47;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 45;
        for (int t = 1; t <= N; ++t) {
          current_statement__ = 43;
          stan::model::assign(pred,
            (stan::model::rvalue(x, "x", stan::model::index_uni(t),
               stan::model::index_uni(
                 stan::model::rvalue(states, "states",
                   stan::model::index_uni(m)))) +
            stan::model::rvalue(Avec, "Avec", stan::model::index_uni(m))),
            "assigning variable pred", stan::model::index_uni(t),
            stan::model::index_uni(m));
        }
      }
      {
        current_statement__ = 63;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(x0, 0, 3));
        current_statement__ = 64;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(A, 0, 3));
        current_statement__ = 67;
        for (int i = 1; i <= n_obsvar; ++i) {
          current_statement__ = 65;
          lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                           stan::model::rvalue(sigma_obs, "sigma_obs",
                             stan::model::index_uni(i)), 3, 0, 1));
        }
        current_statement__ = 70;
        for (int s = 1; s <= n_provar; ++s) {
          current_statement__ = 68;
          lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                           stan::model::rvalue(sigma_process,
                             "sigma_process", stan::model::index_uni(s)), 3,
                           0, 1));
        }
        current_statement__ = 75;
        if (stan::math::logical_eq(est_trend, 1)) {
          current_statement__ = 73;
          for (int i = 1; i <= n_trends; ++i) {
            current_statement__ = 71;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(U, "U",
                               stan::model::index_uni(i)), 0, 1));
          }
        }
        current_statement__ = 78;
        for (int s = 1; s <= S; ++s) {
          current_statement__ = 76;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(pro_dev, "pro_dev",
                             stan::model::index_uni(s)), 0,
                           stan::model::rvalue(sigma_process,
                             "sigma_process",
                             stan::model::index_uni(
                               stan::model::rvalue(proVariances,
                                 "proVariances", stan::model::index_uni(s))))));
        }
        current_statement__ = 89;
        if (stan::math::logical_eq(est_B, 1)) {
          current_statement__ = 87;
          for (int i = 1; i <= S; ++i) {
            current_statement__ = 85;
            for (int j = 1; j <= S; ++j) {
              current_statement__ = 83;
              if (stan::math::logical_eq(i, j)) {
                current_statement__ = 81;
                lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                                 stan::model::rvalue(B, "B",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(j)), 0, 1));
              } else {
                current_statement__ = 79;
                lp_accum__.add(stan::math::normal_lpdf<propto__>(
                                 stan::model::rvalue(B, "B",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(j)), 0, 1));
              }
            }
          }
        }
        current_statement__ = 101;
        for (int i = 1; i <= n_pos; ++i) {
          current_statement__ = 91;
          if (stan::math::logical_eq(family, 1)) {
            current_statement__ = 90;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(pred, "pred",
                               stan::model::index_uni(
                                 stan::model::rvalue(col_indx_pos,
                                   "col_indx_pos", stan::model::index_uni(i))),
                               stan::model::index_uni(
                                 stan::model::rvalue(row_indx_pos,
                                   "row_indx_pos", stan::model::index_uni(i)))),
                             stan::model::rvalue(sigma_obs, "sigma_obs",
                               stan::model::index_uni(
                                 stan::model::rvalue(obsVariances,
                                   "obsVariances",
                                   stan::model::index_uni(
                                     stan::model::rvalue(row_indx_pos,
                                       "row_indx_pos",
                                       stan::model::index_uni(i))))))));
          }
          current_statement__ = 93;
          if (stan::math::logical_eq(family, 2)) {
            current_statement__ = 92;
            lp_accum__.add(stan::math::bernoulli_logit_lpmf<propto__>(
                             stan::model::rvalue(y_int, "y_int",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(pred, "pred",
                               stan::model::index_uni(
                                 stan::model::rvalue(col_indx_pos,
                                   "col_indx_pos", stan::model::index_uni(i))),
                               stan::model::index_uni(
                                 stan::model::rvalue(row_indx_pos,
                                   "row_indx_pos", stan::model::index_uni(i))))));
          }
          current_statement__ = 95;
          if (stan::math::logical_eq(family, 3)) {
            current_statement__ = 94;
            lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(
                             stan::model::rvalue(y_int, "y_int",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(pred, "pred",
                               stan::model::index_uni(
                                 stan::model::rvalue(col_indx_pos,
                                   "col_indx_pos", stan::model::index_uni(i))),
                               stan::model::index_uni(
                                 stan::model::rvalue(row_indx_pos,
                                   "row_indx_pos", stan::model::index_uni(i))))));
          }
          current_statement__ = 97;
          if (stan::math::logical_eq(family, 4)) {
            current_statement__ = 96;
            lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(sigma_obs, "sigma_obs",
                               stan::model::index_uni(
                                 stan::model::rvalue(obsVariances,
                                   "obsVariances",
                                   stan::model::index_uni(
                                     stan::model::rvalue(row_indx_pos,
                                       "row_indx_pos",
                                       stan::model::index_uni(i)))))),
                             (stan::model::rvalue(sigma_obs, "sigma_obs",
                                stan::model::index_uni(
                                  stan::model::rvalue(obsVariances,
                                    "obsVariances",
                                    stan::model::index_uni(
                                      stan::model::rvalue(row_indx_pos,
                                        "row_indx_pos",
                                        stan::model::index_uni(i)))))) /
                             stan::model::rvalue(pred, "pred",
                               stan::model::index_uni(
                                 stan::model::rvalue(col_indx_pos,
                                   "col_indx_pos", stan::model::index_uni(i))),
                               stan::model::index_uni(
                                 stan::model::rvalue(row_indx_pos,
                                   "row_indx_pos", stan::model::index_uni(i)))))));
          }
          current_statement__ = 99;
          if (stan::math::logical_eq(family, 5)) {
            current_statement__ = 98;
            lp_accum__.add(stan::math::lognormal_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(pred, "pred",
                               stan::model::index_uni(
                                 stan::model::rvalue(col_indx_pos,
                                   "col_indx_pos", stan::model::index_uni(i))),
                               stan::model::index_uni(
                                 stan::model::rvalue(row_indx_pos,
                                   "row_indx_pos", stan::model::index_uni(i)))),
                             stan::model::rvalue(sigma_obs, "sigma_obs",
                               stan::model::index_uni(
                                 stan::model::rvalue(obsVariances,
                                   "obsVariances",
                                   stan::model::index_uni(
                                     stan::model::rvalue(row_indx_pos,
                                       "row_indx_pos",
                                       stan::model::index_uni(i))))))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_marss_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> x0 =
        Eigen::Matrix<double,-1,1>::Constant(S,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      x0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(S);
      std::vector<Eigen::Matrix<double,-1,1>> pro_dev =
        std::vector<Eigen::Matrix<double,-1,1>>(pro_dev_1dim__,
          Eigen::Matrix<double,-1,1>::Constant(S,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      pro_dev = in__.template read<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(pro_dev_1dim__,
                  S);
      Eigen::Matrix<double,-1,1> U =
        Eigen::Matrix<double,-1,1>::Constant(U_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      U = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(U_1dim__);
      Eigen::Matrix<double,-1,-1> B =
        Eigen::Matrix<double,-1,-1>::Constant(B_1dim__, B_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      B = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(B_1dim__,
            B_2dim__);
      Eigen::Matrix<double,-1,1> A =
        Eigen::Matrix<double,-1,1>::Constant(n_A,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      A = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_A);
      std::vector<double> sigma_process =
        std::vector<double>(S, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      sigma_process = in__.template read_constrain_lb<
                        std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                        S);
      std::vector<double> sigma_obs =
        std::vector<double>(n_obsvar,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      sigma_obs = in__.template read_constrain_lb<
                    std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                    n_obsvar);
      std::vector<Eigen::Matrix<double,-1,1>> pred =
        std::vector<Eigen::Matrix<double,-1,1>>(N,
          Eigen::Matrix<double,-1,1>::Constant(M,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> x =
        std::vector<Eigen::Matrix<double,-1,1>>(N,
          Eigen::Matrix<double,-1,1>::Constant(S,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,-1> Bmat =
        Eigen::Matrix<double,-1,-1>::Constant(S, S,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> Uvec =
        Eigen::Matrix<double,-1,1>::Constant(S,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> Avec =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(x0);
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= pro_dev_1dim__; ++sym2__) {
          out__.write(pro_dev[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(U);
      out__.write(B);
      out__.write(A);
      out__.write(sigma_process);
      out__.write(sigma_obs);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 15;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 14;
        stan::model::assign(Avec, 0, "assigning variable Avec",
          stan::model::index_uni(i));
      }
      current_statement__ = 17;
      for (int i = 1; i <= n_A; ++i) {
        current_statement__ = 16;
        stan::model::assign(Avec,
          stan::model::rvalue(A, "A", stan::model::index_uni(i)),
          "assigning variable Avec",
          stan::model::index_uni(
            stan::model::rvalue(est_A, "est_A", stan::model::index_uni(i))));
      }
      current_statement__ = 24;
      for (int i = 1; i <= S; ++i) {
        current_statement__ = 22;
        if (est_trend) {
          current_statement__ = 20;
          stan::model::assign(Uvec,
            stan::model::rvalue(U, "U",
              stan::model::index_uni(
                stan::model::rvalue(trends, "trends",
                  stan::model::index_uni(i)))), "assigning variable Uvec",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 18;
          stan::model::assign(Uvec, 0, "assigning variable Uvec",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 33;
      for (int i = 1; i <= S; ++i) {
        current_statement__ = 31;
        for (int j = 1; j <= S; ++j) {
          current_statement__ = 29;
          if (stan::math::logical_eq(i, j)) {
            current_statement__ = 27;
            stan::model::assign(Bmat, 1, "assigning variable Bmat",
              stan::model::index_uni(i), stan::model::index_uni(j));
          } else {
            current_statement__ = 25;
            stan::model::assign(Bmat, 0, "assigning variable Bmat",
              stan::model::index_uni(i), stan::model::index_uni(j));
          }
        }
      }
      current_statement__ = 35;
      if (est_B) {
        current_statement__ = 34;
        stan::model::assign(Bmat, B, "assigning variable Bmat");
      }
      current_statement__ = 36;
      stan::model::assign(x, x0, "assigning variable x",
        stan::model::index_uni(1), stan::model::index_omni());
      current_statement__ = 42;
      for (int t = 2; t <= N; ++t) {
        current_statement__ = 37;
        stan::model::assign(x,
          stan::math::add(
            stan::math::multiply(Bmat,
              stan::model::deep_copy(
                stan::model::rvalue(x, "x", stan::model::index_uni((t - 1)),
                  stan::model::index_omni()))),
            stan::model::rvalue(pro_dev, "pro_dev",
              stan::model::index_uni((t - 1)), stan::model::index_omni())),
          "assigning variable x", stan::model::index_uni(t),
          stan::model::index_omni());
        current_statement__ = 40;
        if (stan::math::logical_eq(est_trend, 1)) {
          current_statement__ = 38;
          stan::model::assign(x,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(x, "x", stan::model::index_uni(t),
                  stan::model::index_omni())), Uvec), "assigning variable x",
            stan::model::index_uni(t), stan::model::index_omni());
        }
      }
      current_statement__ = 47;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 45;
        for (int t = 1; t <= N; ++t) {
          current_statement__ = 43;
          stan::model::assign(pred,
            (stan::model::rvalue(x, "x", stan::model::index_uni(t),
               stan::model::index_uni(
                 stan::model::rvalue(states, "states",
                   stan::model::index_uni(m)))) +
            stan::model::rvalue(Avec, "Avec", stan::model::index_uni(m))),
            "assigning variable pred", stan::model::index_uni(t),
            stan::model::index_uni(m));
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(pred[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(x[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(Bmat);
        out__.write(Uvec);
        out__.write(Avec);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(n_pos,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 50;
      if (stan::math::logical_eq(family, 1)) {
        current_statement__ = 49;
        for (int n = 1; n <= n_pos; ++n) {
          current_statement__ = 48;
          stan::model::assign(log_lik,
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(pred, "pred",
                stan::model::index_uni(
                  stan::model::rvalue(col_indx_pos, "col_indx_pos",
                    stan::model::index_uni(n))),
                stan::model::index_uni(
                  stan::model::rvalue(row_indx_pos, "row_indx_pos",
                    stan::model::index_uni(n)))),
              stan::model::rvalue(sigma_obs, "sigma_obs",
                stan::model::index_uni(
                  stan::model::rvalue(obsVariances, "obsVariances",
                    stan::model::index_uni(
                      stan::model::rvalue(row_indx_pos, "row_indx_pos",
                        stan::model::index_uni(n))))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 53;
      if (stan::math::logical_eq(family, 2)) {
        current_statement__ = 52;
        for (int n = 1; n <= n_pos; ++n) {
          current_statement__ = 51;
          stan::model::assign(log_lik,
            stan::math::bernoulli_lpmf<false>(
              stan::model::rvalue(y_int, "y_int", stan::model::index_uni(n)),
              stan::math::inv_logit(
                stan::model::rvalue(pred, "pred",
                  stan::model::index_uni(
                    stan::model::rvalue(col_indx_pos, "col_indx_pos",
                      stan::model::index_uni(n))),
                  stan::model::index_uni(
                    stan::model::rvalue(row_indx_pos, "row_indx_pos",
                      stan::model::index_uni(n)))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 56;
      if (stan::math::logical_eq(family, 3)) {
        current_statement__ = 55;
        for (int n = 1; n <= n_pos; ++n) {
          current_statement__ = 54;
          stan::model::assign(log_lik,
            stan::math::poisson_lpmf<false>(
              stan::model::rvalue(y_int, "y_int", stan::model::index_uni(n)),
              stan::math::exp(
                stan::model::rvalue(pred, "pred",
                  stan::model::index_uni(
                    stan::model::rvalue(col_indx_pos, "col_indx_pos",
                      stan::model::index_uni(n))),
                  stan::model::index_uni(
                    stan::model::rvalue(row_indx_pos, "row_indx_pos",
                      stan::model::index_uni(n)))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 59;
      if (stan::math::logical_eq(family, 4)) {
        current_statement__ = 58;
        for (int n = 1; n <= n_pos; ++n) {
          current_statement__ = 57;
          stan::model::assign(log_lik,
            stan::math::gamma_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(sigma_obs, "sigma_obs",
                stan::model::index_uni(
                  stan::model::rvalue(obsVariances, "obsVariances",
                    stan::model::index_uni(
                      stan::model::rvalue(row_indx_pos, "row_indx_pos",
                        stan::model::index_uni(n)))))),
              (stan::model::rvalue(sigma_obs, "sigma_obs",
                 stan::model::index_uni(
                   stan::model::rvalue(obsVariances, "obsVariances",
                     stan::model::index_uni(
                       stan::model::rvalue(row_indx_pos, "row_indx_pos",
                         stan::model::index_uni(n)))))) /
              stan::math::exp(
                stan::model::rvalue(pred, "pred",
                  stan::model::index_uni(
                    stan::model::rvalue(col_indx_pos, "col_indx_pos",
                      stan::model::index_uni(n))),
                  stan::model::index_uni(
                    stan::model::rvalue(row_indx_pos, "row_indx_pos",
                      stan::model::index_uni(n))))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 62;
      if (stan::math::logical_eq(family, 5)) {
        current_statement__ = 61;
        for (int n = 1; n <= n_pos; ++n) {
          current_statement__ = 60;
          stan::model::assign(log_lik,
            stan::math::lognormal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(pred, "pred",
                stan::model::index_uni(
                  stan::model::rvalue(col_indx_pos, "col_indx_pos",
                    stan::model::index_uni(n))),
                stan::model::index_uni(
                  stan::model::rvalue(row_indx_pos, "row_indx_pos",
                    stan::model::index_uni(n)))),
              stan::model::rvalue(sigma_obs, "sigma_obs",
                stan::model::index_uni(
                  stan::model::rvalue(obsVariances, "obsVariances",
                    stan::model::index_uni(
                      stan::model::rvalue(row_indx_pos, "row_indx_pos",
                        stan::model::index_uni(n))))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> x0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(x0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(S),
        "assigning variable x0");
      out__.write(x0);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> pro_dev =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(pro_dev_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= pro_dev_1dim__; ++sym2__) {
          current_statement__ = 2;
          stan::model::assign(pro_dev, in__.read<local_scalar_t__>(),
            "assigning variable pro_dev", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(pro_dev);
      Eigen::Matrix<local_scalar_t__,-1,1> U =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(U_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(U,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(U_1dim__),
        "assigning variable U");
      out__.write(U);
      Eigen::Matrix<local_scalar_t__,-1,-1> B =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(B_1dim__, B_2dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(B,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(B_1dim__, B_2dim__),
        "assigning variable B");
      out__.write(B);
      Eigen::Matrix<local_scalar_t__,-1,1> A =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_A, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(A,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_A),
        "assigning variable A");
      out__.write(A);
      std::vector<local_scalar_t__> sigma_process =
        std::vector<local_scalar_t__>(S, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(sigma_process,
        in__.read<std::vector<local_scalar_t__>>(S),
        "assigning variable sigma_process");
      out__.write_free_lb(0, sigma_process);
      std::vector<local_scalar_t__> sigma_obs =
        std::vector<local_scalar_t__>(n_obsvar, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(sigma_obs,
        in__.read<std::vector<local_scalar_t__>>(n_obsvar),
        "assigning variable sigma_obs");
      out__.write_free_lb(0, sigma_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "x0", "double",
        std::vector<size_t>{static_cast<size_t>(S)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "pro_dev",
        "double",
        std::vector<size_t>{static_cast<size_t>(pro_dev_1dim__),
          static_cast<size_t>(S)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "U", "double",
        std::vector<size_t>{static_cast<size_t>(U_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "B", "double",
        std::vector<size_t>{static_cast<size_t>(B_1dim__),
          static_cast<size_t>(B_2dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "A", "double",
        std::vector<size_t>{static_cast<size_t>(n_A)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigma_process",
        "double", std::vector<size_t>{static_cast<size_t>(S)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sigma_obs",
        "double", std::vector<size_t>{static_cast<size_t>(n_obsvar)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> x0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> x0_flat__;
        current_statement__ = 1;
        x0_flat__ = context__.vals_r("x0");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(x0, x0_flat__[(pos__ - 1)],
            "assigning variable x0", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(x0);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> pro_dev =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(pro_dev_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(S, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> pro_dev_flat__;
        current_statement__ = 2;
        pro_dev_flat__ = context__.vals_r("pro_dev");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= pro_dev_1dim__; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(pro_dev, pro_dev_flat__[(pos__ - 1)],
              "assigning variable pro_dev", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(pro_dev);
      Eigen::Matrix<local_scalar_t__,-1,1> U =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(U_1dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> U_flat__;
        current_statement__ = 3;
        U_flat__ = context__.vals_r("U");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= U_1dim__; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(U, U_flat__[(pos__ - 1)],
            "assigning variable U", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(U);
      Eigen::Matrix<local_scalar_t__,-1,-1> B =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(B_1dim__, B_2dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> B_flat__;
        current_statement__ = 4;
        B_flat__ = context__.vals_r("B");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= B_2dim__; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= B_1dim__; ++sym2__) {
            current_statement__ = 4;
            stan::model::assign(B, B_flat__[(pos__ - 1)],
              "assigning variable B", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(B);
      Eigen::Matrix<local_scalar_t__,-1,1> A =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_A, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> A_flat__;
        current_statement__ = 5;
        A_flat__ = context__.vals_r("A");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(A, A_flat__[(pos__ - 1)],
            "assigning variable A", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(A);
      std::vector<local_scalar_t__> sigma_process =
        std::vector<local_scalar_t__>(S, DUMMY_VAR__);
      current_statement__ = 6;
      sigma_process = context__.vals_r("sigma_process");
      out__.write_free_lb(0, sigma_process);
      std::vector<local_scalar_t__> sigma_obs =
        std::vector<local_scalar_t__>(n_obsvar, DUMMY_VAR__);
      current_statement__ = 7;
      sigma_obs = context__.vals_r("sigma_obs");
      out__.write_free_lb(0, sigma_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"x0", "pro_dev", "U", "B", "A",
                "sigma_process", "sigma_obs"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"pred", "x", "Bmat", "Uvec", "Avec"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(S)},
                std::vector<size_t>{static_cast<size_t>(pro_dev_1dim__),
                  static_cast<size_t>(S)},
                std::vector<size_t>{static_cast<size_t>(U_1dim__)},
                std::vector<size_t>{static_cast<size_t>(B_1dim__),
                  static_cast<size_t>(B_2dim__)},
                std::vector<size_t>{static_cast<size_t>(n_A)},
                std::vector<size_t>{static_cast<size_t>(S)},
                std::vector<size_t>{static_cast<size_t>(n_obsvar)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(S)},
             std::vector<size_t>{static_cast<size_t>(S),
               static_cast<size_t>(S)},
             std::vector<size_t>{static_cast<size_t>(S)},
             std::vector<size_t>{static_cast<size_t>(M)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_pos)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      param_names__.emplace_back(std::string() + "x0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= pro_dev_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "pro_dev" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= U_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "U" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= B_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= B_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "B" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
      param_names__.emplace_back(std::string() + "A" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_process" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_obsvar; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_obs" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "pred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "x" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          param_names__.emplace_back(std::string() + "Bmat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        param_names__.emplace_back(std::string() + "Uvec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "Avec" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      param_names__.emplace_back(std::string() + "x0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= pro_dev_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "pro_dev" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= U_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "U" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= B_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= B_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "B" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_A; ++sym1__) {
      param_names__.emplace_back(std::string() + "A" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_process" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_obsvar; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_obs" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "pred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "x" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= S; ++sym2__) {
          param_names__.emplace_back(std::string() + "Bmat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
        param_names__.emplace_back(std::string() + "Uvec" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "Avec" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"x0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"parameters\"},{\"name\":\"pro_dev\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(pro_dev_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "}},\"block\":\"parameters\"},{\"name\":\"U\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(U_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"B\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(B_1dim__) + ",\"cols\":" + std::to_string(B_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_A) + "},\"block\":\"parameters\"},{\"name\":\"sigma_process\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obsvar) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"Bmat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(S) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Uvec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Avec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_pos) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"x0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"parameters\"},{\"name\":\"pro_dev\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(pro_dev_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "}},\"block\":\"parameters\"},{\"name\":\"U\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(U_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"B\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(B_1dim__) + ",\"cols\":" + std::to_string(B_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_A) + "},\"block\":\"parameters\"},{\"name\":\"sigma_process\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_obs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obsvar) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"Bmat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(S) + ",\"cols\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Uvec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(S) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Avec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_pos) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((S + (pro_dev_1dim__ * S)) + U_1dim__) +
      (B_1dim__ * B_2dim__)) + n_A) + S) + n_obsvar);
    const size_t num_transformed = emit_transformed_parameters * ((((((N * M)
      + (N * S)) + (S * S)) + S) + M));
    const size_t num_gen_quantities = emit_generated_quantities * (n_pos);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((S + (pro_dev_1dim__ * S)) + U_1dim__) +
      (B_1dim__ * B_2dim__)) + n_A) + S) + n_obsvar);
    const size_t num_transformed = emit_transformed_parameters * ((((((N * M)
      + (N * S)) + (S * S)) + S) + M));
    const size_t num_gen_quantities = emit_generated_quantities * (n_pos);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_marss_namespace::model_marss;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_marss_namespace::profiles__;
}
#endif
#endif
