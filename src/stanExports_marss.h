// Generated by rstantools.  Do not edit by hand.

/*
    atsarpackage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    atsarpackage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with atsarpackage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_marss_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_marss");
    reader.add_event(123, 121, "end", "model_marss");
    return reader;
}
#include <stan_meta_header.hpp>
class model_marss
  : public stan::model::model_base_crtp<model_marss> {
private:
        int N;
        int M;
        std::vector<int> states;
        int S;
        std::vector<int> obsVariances;
        int n_obsvar;
        std::vector<int> proVariances;
        int n_provar;
        std::vector<int> trends;
        int n_trends;
        int n_pos;
        std::vector<int> col_indx_pos;
        std::vector<int> row_indx_pos;
        int est_trend;
        int est_B;
        vector_d y;
        std::vector<int> y_int;
        int family;
public:
    model_marss(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_marss(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_marss_namespace::model_marss";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 0);
            current_statement_begin__ = 4;
            validate_non_negative_index("states", "M", M);
            context__.validate_dims("data initialization", "states", "int", context__.to_vec(M));
            states = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("states");
            pos__ = 0;
            size_t states_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < states_k_0_max__; ++k_0__) {
                states[k_0__] = vals_i__[pos__++];
            }
            size_t states_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < states_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "states[i_0__]", states[i_0__], 0);
            }
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            check_greater_or_equal(function__, "S", S, 0);
            current_statement_begin__ = 6;
            validate_non_negative_index("obsVariances", "M", M);
            context__.validate_dims("data initialization", "obsVariances", "int", context__.to_vec(M));
            obsVariances = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("obsVariances");
            pos__ = 0;
            size_t obsVariances_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < obsVariances_k_0_max__; ++k_0__) {
                obsVariances[k_0__] = vals_i__[pos__++];
            }
            size_t obsVariances_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < obsVariances_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obsVariances[i_0__]", obsVariances[i_0__], 0);
            }
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "n_obsvar", "int", context__.to_vec());
            n_obsvar = int(0);
            vals_i__ = context__.vals_i("n_obsvar");
            pos__ = 0;
            n_obsvar = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_obsvar", n_obsvar, 0);
            current_statement_begin__ = 8;
            validate_non_negative_index("proVariances", "(S + 1)", (S + 1));
            context__.validate_dims("data initialization", "proVariances", "int", context__.to_vec((S + 1)));
            proVariances = std::vector<int>((S + 1), int(0));
            vals_i__ = context__.vals_i("proVariances");
            pos__ = 0;
            size_t proVariances_k_0_max__ = (S + 1);
            for (size_t k_0__ = 0; k_0__ < proVariances_k_0_max__; ++k_0__) {
                proVariances[k_0__] = vals_i__[pos__++];
            }
            size_t proVariances_i_0_max__ = (S + 1);
            for (size_t i_0__ = 0; i_0__ < proVariances_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "proVariances[i_0__]", proVariances[i_0__], 0);
            }
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "n_provar", "int", context__.to_vec());
            n_provar = int(0);
            vals_i__ = context__.vals_i("n_provar");
            pos__ = 0;
            n_provar = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_provar", n_provar, 0);
            current_statement_begin__ = 10;
            validate_non_negative_index("trends", "(S + 1)", (S + 1));
            context__.validate_dims("data initialization", "trends", "int", context__.to_vec((S + 1)));
            trends = std::vector<int>((S + 1), int(0));
            vals_i__ = context__.vals_i("trends");
            pos__ = 0;
            size_t trends_k_0_max__ = (S + 1);
            for (size_t k_0__ = 0; k_0__ < trends_k_0_max__; ++k_0__) {
                trends[k_0__] = vals_i__[pos__++];
            }
            size_t trends_i_0_max__ = (S + 1);
            for (size_t i_0__ = 0; i_0__ < trends_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "trends[i_0__]", trends[i_0__], 0);
            }
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "n_trends", "int", context__.to_vec());
            n_trends = int(0);
            vals_i__ = context__.vals_i("n_trends");
            pos__ = 0;
            n_trends = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_trends", n_trends, 0);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "n_pos", "int", context__.to_vec());
            n_pos = int(0);
            vals_i__ = context__.vals_i("n_pos");
            pos__ = 0;
            n_pos = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pos", n_pos, 0);
            current_statement_begin__ = 13;
            validate_non_negative_index("col_indx_pos", "n_pos", n_pos);
            context__.validate_dims("data initialization", "col_indx_pos", "int", context__.to_vec(n_pos));
            col_indx_pos = std::vector<int>(n_pos, int(0));
            vals_i__ = context__.vals_i("col_indx_pos");
            pos__ = 0;
            size_t col_indx_pos_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < col_indx_pos_k_0_max__; ++k_0__) {
                col_indx_pos[k_0__] = vals_i__[pos__++];
            }
            size_t col_indx_pos_i_0_max__ = n_pos;
            for (size_t i_0__ = 0; i_0__ < col_indx_pos_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "col_indx_pos[i_0__]", col_indx_pos[i_0__], 0);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("row_indx_pos", "n_pos", n_pos);
            context__.validate_dims("data initialization", "row_indx_pos", "int", context__.to_vec(n_pos));
            row_indx_pos = std::vector<int>(n_pos, int(0));
            vals_i__ = context__.vals_i("row_indx_pos");
            pos__ = 0;
            size_t row_indx_pos_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < row_indx_pos_k_0_max__; ++k_0__) {
                row_indx_pos[k_0__] = vals_i__[pos__++];
            }
            size_t row_indx_pos_i_0_max__ = n_pos;
            for (size_t i_0__ = 0; i_0__ < row_indx_pos_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "row_indx_pos[i_0__]", row_indx_pos[i_0__], 0);
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "est_trend", "int", context__.to_vec());
            est_trend = int(0);
            vals_i__ = context__.vals_i("est_trend");
            pos__ = 0;
            est_trend = vals_i__[pos__++];
            check_greater_or_equal(function__, "est_trend", est_trend, 0);
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "est_B", "int", context__.to_vec());
            est_B = int(0);
            vals_i__ = context__.vals_i("est_B");
            pos__ = 0;
            est_B = vals_i__[pos__++];
            check_greater_or_equal(function__, "est_B", est_B, 0);
            current_statement_begin__ = 17;
            validate_non_negative_index("y", "n_pos", n_pos);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n_pos));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_pos);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = n_pos;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("y_int", "n_pos", n_pos);
            context__.validate_dims("data initialization", "y_int", "int", context__.to_vec(n_pos));
            y_int = std::vector<int>(n_pos, int(0));
            vals_i__ = context__.vals_i("y_int");
            pos__ = 0;
            size_t y_int_k_0_max__ = n_pos;
            for (size_t k_0__ = 0; k_0__ < y_int_k_0_max__; ++k_0__) {
                y_int[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "family", "int", context__.to_vec());
            family = int(0);
            vals_i__ = context__.vals_i("family");
            pos__ = 0;
            family = vals_i__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 22;
            validate_non_negative_index("x0", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 23;
            validate_non_negative_index("pro_dev", "S", S);
            validate_non_negative_index("pro_dev", "(N - 1)", (N - 1));
            num_params_r__ += (S * (N - 1));
            current_statement_begin__ = 24;
            validate_non_negative_index("U", "(n_trends * est_trend)", (n_trends * est_trend));
            num_params_r__ += (n_trends * est_trend);
            current_statement_begin__ = 25;
            validate_non_negative_index("B", "(S * est_B)", (S * est_B));
            validate_non_negative_index("B", "(S * est_B)", (S * est_B));
            num_params_r__ += ((S * est_B) * (S * est_B));
            current_statement_begin__ = 26;
            validate_non_negative_index("sigma_process", "S", S);
            num_params_r__ += (1 * S);
            current_statement_begin__ = 27;
            validate_non_negative_index("sigma_obs", "n_obsvar", n_obsvar);
            num_params_r__ += (1 * n_obsvar);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_marss() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 22;
        if (!(context__.contains_r("x0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable x0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("x0");
        pos__ = 0U;
        validate_non_negative_index("x0", "S", S);
        context__.validate_dims("parameter initialization", "x0", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> x0(S);
        size_t x0_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
            x0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(x0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable x0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("pro_dev")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pro_dev missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pro_dev");
        pos__ = 0U;
        validate_non_negative_index("pro_dev", "S", S);
        validate_non_negative_index("pro_dev", "(N - 1)", (N - 1));
        context__.validate_dims("parameter initialization", "pro_dev", "vector_d", context__.to_vec((N - 1),S));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pro_dev((N - 1), Eigen::Matrix<double, Eigen::Dynamic, 1>(S));
        size_t pro_dev_j_1_max__ = S;
        size_t pro_dev_k_0_max__ = (N - 1);
        for (size_t j_1__ = 0; j_1__ < pro_dev_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pro_dev_k_0_max__; ++k_0__) {
                pro_dev[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t pro_dev_i_0_max__ = (N - 1);
        for (size_t i_0__ = 0; i_0__ < pro_dev_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(pro_dev[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pro_dev: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("U")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable U missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("U");
        pos__ = 0U;
        validate_non_negative_index("U", "(n_trends * est_trend)", (n_trends * est_trend));
        context__.validate_dims("parameter initialization", "U", "vector_d", context__.to_vec((n_trends * est_trend)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> U((n_trends * est_trend));
        size_t U_j_1_max__ = (n_trends * est_trend);
        for (size_t j_1__ = 0; j_1__ < U_j_1_max__; ++j_1__) {
            U(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(U);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable U: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("B")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable B missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("B");
        pos__ = 0U;
        validate_non_negative_index("B", "(S * est_B)", (S * est_B));
        validate_non_negative_index("B", "(S * est_B)", (S * est_B));
        context__.validate_dims("parameter initialization", "B", "matrix_d", context__.to_vec((S * est_B),(S * est_B)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> B((S * est_B), (S * est_B));
        size_t B_j_2_max__ = (S * est_B);
        size_t B_j_1_max__ = (S * est_B);
        for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                B(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(B);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable B: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("sigma_process")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_process missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_process");
        pos__ = 0U;
        validate_non_negative_index("sigma_process", "S", S);
        context__.validate_dims("parameter initialization", "sigma_process", "double", context__.to_vec(S));
        std::vector<double> sigma_process(S, double(0));
        size_t sigma_process_k_0_max__ = S;
        for (size_t k_0__ = 0; k_0__ < sigma_process_k_0_max__; ++k_0__) {
            sigma_process[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_process_i_0_max__ = S;
        for (size_t i_0__ = 0; i_0__ < sigma_process_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_process[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_process: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("sigma_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        validate_non_negative_index("sigma_obs", "n_obsvar", n_obsvar);
        context__.validate_dims("parameter initialization", "sigma_obs", "double", context__.to_vec(n_obsvar));
        std::vector<double> sigma_obs(n_obsvar, double(0));
        size_t sigma_obs_k_0_max__ = n_obsvar;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            sigma_obs[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_obs_i_0_max__ = n_obsvar;
        for (size_t i_0__ = 0; i_0__ < sigma_obs_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_obs[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 22;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x0;
            (void) x0;  // dummy to suppress unused var warning
            if (jacobian__)
                x0 = in__.vector_constrain(S, lp__);
            else
                x0 = in__.vector_constrain(S);
            current_statement_begin__ = 23;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > pro_dev;
            size_t pro_dev_d_0_max__ = (N - 1);
            pro_dev.reserve(pro_dev_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < pro_dev_d_0_max__; ++d_0__) {
                if (jacobian__)
                    pro_dev.push_back(in__.vector_constrain(S, lp__));
                else
                    pro_dev.push_back(in__.vector_constrain(S));
            }
            current_statement_begin__ = 24;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> U;
            (void) U;  // dummy to suppress unused var warning
            if (jacobian__)
                U = in__.vector_constrain((n_trends * est_trend), lp__);
            else
                U = in__.vector_constrain((n_trends * est_trend));
            current_statement_begin__ = 25;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> B;
            (void) B;  // dummy to suppress unused var warning
            if (jacobian__)
                B = in__.matrix_constrain((S * est_B), (S * est_B), lp__);
            else
                B = in__.matrix_constrain((S * est_B), (S * est_B));
            current_statement_begin__ = 26;
            std::vector<local_scalar_t__> sigma_process;
            size_t sigma_process_d_0_max__ = S;
            sigma_process.reserve(sigma_process_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_process_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_process.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_process.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 27;
            std::vector<local_scalar_t__> sigma_obs;
            size_t sigma_obs_d_0_max__ = n_obsvar;
            sigma_obs.reserve(sigma_obs_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_obs_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_obs.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_obs.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 30;
            validate_non_negative_index("pred", "M", M);
            validate_non_negative_index("pred", "N", N);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > pred(N, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(M));
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("x", "S", S);
            validate_non_negative_index("x", "N", N);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > x(N, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(S));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);
            current_statement_begin__ = 33;
            validate_non_negative_index("Bmat", "S", S);
            validate_non_negative_index("Bmat", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Bmat(S, S);
            stan::math::initialize(Bmat, DUMMY_VAR__);
            stan::math::fill(Bmat, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("Uvec", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Uvec(S);
            stan::math::initialize(Uvec, DUMMY_VAR__);
            stan::math::fill(Uvec, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 36;
            for (int i = 1; i <= S; ++i) {
                current_statement_begin__ = 37;
                if (as_bool(est_trend)) {
                    current_statement_begin__ = 38;
                    stan::model::assign(Uvec, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(U, get_base1(trends, i, "trends", 1), "U", 1), 
                                "assigning variable Uvec");
                } else {
                    current_statement_begin__ = 40;
                    stan::model::assign(Uvec, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable Uvec");
                }
            }
            current_statement_begin__ = 43;
            for (int i = 1; i <= S; ++i) {
                current_statement_begin__ = 44;
                for (int j = 1; j <= S; ++j) {
                    current_statement_begin__ = 45;
                    if (as_bool(logical_eq(i, j))) {
                        current_statement_begin__ = 46;
                        stan::model::assign(Bmat, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    1, 
                                    "assigning variable Bmat");
                    } else {
                        current_statement_begin__ = 48;
                        stan::model::assign(Bmat, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    0, 
                                    "assigning variable Bmat");
                    }
                }
            }
            current_statement_begin__ = 52;
            if (as_bool(est_B)) {
                current_statement_begin__ = 52;
                stan::math::assign(Bmat, B);
            }
            current_statement_begin__ = 54;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        x0, 
                        "assigning variable x");
            current_statement_begin__ = 55;
            for (int t = 2; t <= N; ++t) {
                current_statement_begin__ = 56;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            stan::model::deep_copy(add(multiply(Bmat, stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), stan::model::rvalue(pro_dev, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "pro_dev"))), 
                            "assigning variable x");
                current_statement_begin__ = 57;
                if (as_bool(logical_eq(est_trend, 1))) {
                    current_statement_begin__ = 58;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                stan::model::deep_copy(add(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"), Uvec)), 
                                "assigning variable x");
                }
            }
            current_statement_begin__ = 70;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 71;
                for (int t = 1; t <= N; ++t) {
                    current_statement_begin__ = 72;
                    stan::model::assign(pred, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                get_base1(get_base1(x, t, "x", 1), get_base1(states, m, "states", 1), "x", 2), 
                                "assigning variable pred");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 30;
            size_t pred_k_0_max__ = N;
            size_t pred_j_1_max__ = M;
            for (size_t k_0__ = 0; k_0__ < pred_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(pred[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: pred" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 31;
            size_t x_k_0_max__ = N;
            size_t x_j_1_max__ = S;
            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(x[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 33;
            size_t Bmat_j_1_max__ = S;
            size_t Bmat_j_2_max__ = S;
            for (size_t j_1__ = 0; j_1__ < Bmat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Bmat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Bmat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Bmat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Bmat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 34;
            size_t Uvec_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < Uvec_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(Uvec(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Uvec" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Uvec: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 78;
            for (int i = 1; i <= n_obsvar; ++i) {
                current_statement_begin__ = 79;
                lp_accum__.add(student_t_log<propto__>(get_base1(sigma_obs, i, "sigma_obs", 1), 3, 0, 2));
            }
            current_statement_begin__ = 81;
            for (int s = 1; s <= n_provar; ++s) {
                current_statement_begin__ = 82;
                lp_accum__.add(student_t_log<propto__>(get_base1(sigma_process, s, "sigma_process", 1), 3, 0, 2));
            }
            current_statement_begin__ = 84;
            if (as_bool(logical_eq(est_trend, 1))) {
                current_statement_begin__ = 85;
                for (int i = 1; i <= n_trends; ++i) {
                    current_statement_begin__ = 86;
                    lp_accum__.add(normal_log<propto__>(get_base1(U, i, "U", 1), 0, 1));
                }
            }
            current_statement_begin__ = 89;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 90;
                lp_accum__.add(normal_log<propto__>(get_base1(pro_dev, s, "pro_dev", 1), 0, get_base1(sigma_process, get_base1(proVariances, s, "proVariances", 1), "sigma_process", 1)));
            }
            current_statement_begin__ = 92;
            if (as_bool(logical_eq(est_B, 1))) {
                current_statement_begin__ = 93;
                for (int i = 1; i <= S; ++i) {
                    current_statement_begin__ = 94;
                    for (int j = 1; j <= S; ++j) {
                        current_statement_begin__ = 95;
                        if (as_bool(logical_eq(i, j))) {
                            current_statement_begin__ = 96;
                            lp_accum__.add(uniform_log<propto__>(get_base1(B, i, j, "B", 1), 0, 1));
                        } else {
                            current_statement_begin__ = 98;
                            lp_accum__.add(normal_log<propto__>(get_base1(B, i, j, "B", 1), 0, 1));
                        }
                    }
                }
            }
            current_statement_begin__ = 105;
            for (int i = 1; i <= n_pos; ++i) {
                current_statement_begin__ = 106;
                if (as_bool(logical_eq(family, 1))) {
                    current_statement_begin__ = 106;
                    lp_accum__.add(normal_log<propto__>(get_base1(y, i, "y", 1), get_base1(get_base1(pred, get_base1(col_indx_pos, i, "col_indx_pos", 1), "pred", 1), get_base1(row_indx_pos, i, "row_indx_pos", 1), "pred", 2), get_base1(sigma_obs, get_base1(obsVariances, get_base1(row_indx_pos, i, "row_indx_pos", 1), "obsVariances", 1), "sigma_obs", 1)));
                }
                current_statement_begin__ = 107;
                if (as_bool(logical_eq(family, 2))) {
                    current_statement_begin__ = 107;
                    lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(y_int, i, "y_int", 1), get_base1(get_base1(pred, get_base1(col_indx_pos, i, "col_indx_pos", 1), "pred", 1), get_base1(row_indx_pos, i, "row_indx_pos", 1), "pred", 2)));
                }
                current_statement_begin__ = 108;
                if (as_bool(logical_eq(family, 3))) {
                    current_statement_begin__ = 108;
                    lp_accum__.add(poisson_log_log<propto__>(get_base1(y_int, i, "y_int", 1), get_base1(get_base1(pred, get_base1(col_indx_pos, i, "col_indx_pos", 1), "pred", 1), get_base1(row_indx_pos, i, "row_indx_pos", 1), "pred", 2)));
                }
                current_statement_begin__ = 109;
                if (as_bool(logical_eq(family, 4))) {
                    current_statement_begin__ = 109;
                    lp_accum__.add(gamma_log<propto__>(get_base1(y, i, "y", 1), get_base1(sigma_obs, get_base1(obsVariances, get_base1(row_indx_pos, i, "row_indx_pos", 1), "obsVariances", 1), "sigma_obs", 1), (get_base1(sigma_obs, get_base1(obsVariances, get_base1(row_indx_pos, i, "row_indx_pos", 1), "obsVariances", 1), "sigma_obs", 1) / get_base1(get_base1(pred, get_base1(col_indx_pos, i, "col_indx_pos", 1), "pred", 1), get_base1(row_indx_pos, i, "row_indx_pos", 1), "pred", 2))));
                }
                current_statement_begin__ = 110;
                if (as_bool(logical_eq(family, 5))) {
                    current_statement_begin__ = 110;
                    lp_accum__.add(lognormal_log<propto__>(get_base1(y, i, "y", 1), get_base1(get_base1(pred, get_base1(col_indx_pos, i, "col_indx_pos", 1), "pred", 1), get_base1(row_indx_pos, i, "row_indx_pos", 1), "pred", 2), get_base1(sigma_obs, get_base1(obsVariances, get_base1(row_indx_pos, i, "row_indx_pos", 1), "obsVariances", 1), "sigma_obs", 1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("x0");
        names__.push_back("pro_dev");
        names__.push_back("U");
        names__.push_back("B");
        names__.push_back("sigma_process");
        names__.push_back("sigma_obs");
        names__.push_back("pred");
        names__.push_back("x");
        names__.push_back("Bmat");
        names__.push_back("Uvec");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N - 1));
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_trends * est_trend));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((S * est_B));
        dims__.push_back((S * est_B));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obsvar);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pos);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_marss_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> x0 = in__.vector_constrain(S);
        size_t x0_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
            vars__.push_back(x0(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pro_dev;
        size_t pro_dev_d_0_max__ = (N - 1);
        pro_dev.reserve(pro_dev_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < pro_dev_d_0_max__; ++d_0__) {
            pro_dev.push_back(in__.vector_constrain(S));
        }
        size_t pro_dev_j_1_max__ = S;
        size_t pro_dev_k_0_max__ = (N - 1);
        for (size_t j_1__ = 0; j_1__ < pro_dev_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pro_dev_k_0_max__; ++k_0__) {
                vars__.push_back(pro_dev[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> U = in__.vector_constrain((n_trends * est_trend));
        size_t U_j_1_max__ = (n_trends * est_trend);
        for (size_t j_1__ = 0; j_1__ < U_j_1_max__; ++j_1__) {
            vars__.push_back(U(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> B = in__.matrix_constrain((S * est_B), (S * est_B));
        size_t B_j_2_max__ = (S * est_B);
        size_t B_j_1_max__ = (S * est_B);
        for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                vars__.push_back(B(j_1__, j_2__));
            }
        }
        std::vector<double> sigma_process;
        size_t sigma_process_d_0_max__ = S;
        sigma_process.reserve(sigma_process_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_process_d_0_max__; ++d_0__) {
            sigma_process.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_process_k_0_max__ = S;
        for (size_t k_0__ = 0; k_0__ < sigma_process_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_process[k_0__]);
        }
        std::vector<double> sigma_obs;
        size_t sigma_obs_d_0_max__ = n_obsvar;
        sigma_obs.reserve(sigma_obs_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_obs_d_0_max__; ++d_0__) {
            sigma_obs.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_obs_k_0_max__ = n_obsvar;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_obs[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 30;
            validate_non_negative_index("pred", "M", M);
            validate_non_negative_index("pred", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > pred(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(M));
            stan::math::initialize(pred, DUMMY_VAR__);
            stan::math::fill(pred, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("x", "S", S);
            validate_non_negative_index("x", "N", N);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > x(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(S));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);
            current_statement_begin__ = 33;
            validate_non_negative_index("Bmat", "S", S);
            validate_non_negative_index("Bmat", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Bmat(S, S);
            stan::math::initialize(Bmat, DUMMY_VAR__);
            stan::math::fill(Bmat, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("Uvec", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Uvec(S);
            stan::math::initialize(Uvec, DUMMY_VAR__);
            stan::math::fill(Uvec, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 36;
            for (int i = 1; i <= S; ++i) {
                current_statement_begin__ = 37;
                if (as_bool(est_trend)) {
                    current_statement_begin__ = 38;
                    stan::model::assign(Uvec, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(U, get_base1(trends, i, "trends", 1), "U", 1), 
                                "assigning variable Uvec");
                } else {
                    current_statement_begin__ = 40;
                    stan::model::assign(Uvec, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable Uvec");
                }
            }
            current_statement_begin__ = 43;
            for (int i = 1; i <= S; ++i) {
                current_statement_begin__ = 44;
                for (int j = 1; j <= S; ++j) {
                    current_statement_begin__ = 45;
                    if (as_bool(logical_eq(i, j))) {
                        current_statement_begin__ = 46;
                        stan::model::assign(Bmat, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    1, 
                                    "assigning variable Bmat");
                    } else {
                        current_statement_begin__ = 48;
                        stan::model::assign(Bmat, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    0, 
                                    "assigning variable Bmat");
                    }
                }
            }
            current_statement_begin__ = 52;
            if (as_bool(est_B)) {
                current_statement_begin__ = 52;
                stan::math::assign(Bmat, B);
            }
            current_statement_begin__ = 54;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        x0, 
                        "assigning variable x");
            current_statement_begin__ = 55;
            for (int t = 2; t <= N; ++t) {
                current_statement_begin__ = 56;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            stan::model::deep_copy(add(multiply(Bmat, stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), stan::model::rvalue(pro_dev, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "pro_dev"))), 
                            "assigning variable x");
                current_statement_begin__ = 57;
                if (as_bool(logical_eq(est_trend, 1))) {
                    current_statement_begin__ = 58;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                stan::model::deep_copy(add(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"), Uvec)), 
                                "assigning variable x");
                }
            }
            current_statement_begin__ = 70;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 71;
                for (int t = 1; t <= N; ++t) {
                    current_statement_begin__ = 72;
                    stan::model::assign(pred, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list())), 
                                get_base1(get_base1(x, t, "x", 1), get_base1(states, m, "states", 1), "x", 2), 
                                "assigning variable pred");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t pred_j_1_max__ = M;
                size_t pred_k_0_max__ = N;
                for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < pred_k_0_max__; ++k_0__) {
                        vars__.push_back(pred[k_0__](j_1__));
                    }
                }
                size_t x_j_1_max__ = S;
                size_t x_k_0_max__ = N;
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                        vars__.push_back(x[k_0__](j_1__));
                    }
                }
                size_t Bmat_j_2_max__ = S;
                size_t Bmat_j_1_max__ = S;
                for (size_t j_2__ = 0; j_2__ < Bmat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Bmat_j_1_max__; ++j_1__) {
                        vars__.push_back(Bmat(j_1__, j_2__));
                    }
                }
                size_t Uvec_j_1_max__ = S;
                for (size_t j_1__ = 0; j_1__ < Uvec_j_1_max__; ++j_1__) {
                    vars__.push_back(Uvec(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 114;
            validate_non_negative_index("log_lik", "n_pos", n_pos);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n_pos);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 116;
            if (as_bool(logical_eq(family, 1))) {
                current_statement_begin__ = 116;
                for (int n = 1; n <= n_pos; ++n) {
                    current_statement_begin__ = 116;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_log(get_base1(y, n, "y", 1), get_base1(get_base1(pred, get_base1(col_indx_pos, n, "col_indx_pos", 1), "pred", 1), get_base1(row_indx_pos, n, "row_indx_pos", 1), "pred", 2), get_base1(sigma_obs, get_base1(obsVariances, get_base1(row_indx_pos, n, "row_indx_pos", 1), "obsVariances", 1), "sigma_obs", 1)), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 117;
            if (as_bool(logical_eq(family, 2))) {
                current_statement_begin__ = 117;
                for (int n = 1; n <= n_pos; ++n) {
                    current_statement_begin__ = 117;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                bernoulli_log(get_base1(y_int, n, "y_int", 1), inv_logit(get_base1(get_base1(pred, get_base1(col_indx_pos, n, "col_indx_pos", 1), "pred", 1), get_base1(row_indx_pos, n, "row_indx_pos", 1), "pred", 2))), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 118;
            if (as_bool(logical_eq(family, 3))) {
                current_statement_begin__ = 118;
                for (int n = 1; n <= n_pos; ++n) {
                    current_statement_begin__ = 118;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                poisson_log(get_base1(y_int, n, "y_int", 1), stan::math::exp(get_base1(get_base1(pred, get_base1(col_indx_pos, n, "col_indx_pos", 1), "pred", 1), get_base1(row_indx_pos, n, "row_indx_pos", 1), "pred", 2))), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 119;
            if (as_bool(logical_eq(family, 4))) {
                current_statement_begin__ = 119;
                for (int n = 1; n <= n_pos; ++n) {
                    current_statement_begin__ = 119;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                gamma_log(get_base1(y, n, "y", 1), get_base1(sigma_obs, get_base1(obsVariances, get_base1(row_indx_pos, n, "row_indx_pos", 1), "obsVariances", 1), "sigma_obs", 1), (get_base1(sigma_obs, get_base1(obsVariances, get_base1(row_indx_pos, n, "row_indx_pos", 1), "obsVariances", 1), "sigma_obs", 1) / stan::math::exp(get_base1(get_base1(pred, get_base1(col_indx_pos, n, "col_indx_pos", 1), "pred", 1), get_base1(row_indx_pos, n, "row_indx_pos", 1), "pred", 2)))), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 120;
            if (as_bool(logical_eq(family, 5))) {
                current_statement_begin__ = 120;
                for (int n = 1; n <= n_pos; ++n) {
                    current_statement_begin__ = 120;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                lognormal_log(get_base1(y, n, "y", 1), get_base1(get_base1(pred, get_base1(col_indx_pos, n, "col_indx_pos", 1), "pred", 1), get_base1(row_indx_pos, n, "row_indx_pos", 1), "pred", 2), get_base1(sigma_obs, get_base1(obsVariances, get_base1(row_indx_pos, n, "row_indx_pos", 1), "obsVariances", 1), "sigma_obs", 1)), 
                                "assigning variable log_lik");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 114;
            size_t log_lik_j_1_max__ = n_pos;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_marss";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t x0_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pro_dev_j_1_max__ = S;
        size_t pro_dev_k_0_max__ = (N - 1);
        for (size_t j_1__ = 0; j_1__ < pro_dev_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pro_dev_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pro_dev" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t U_j_1_max__ = (n_trends * est_trend);
        for (size_t j_1__ = 0; j_1__ < U_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "U" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t B_j_2_max__ = (S * est_B);
        size_t B_j_1_max__ = (S * est_B);
        for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_process_k_0_max__ = S;
        for (size_t k_0__ = 0; k_0__ < sigma_process_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_process" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_obs_k_0_max__ = n_obsvar;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_obs" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t pred_j_1_max__ = M;
            size_t pred_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t x_j_1_max__ = S;
            size_t x_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Bmat_j_2_max__ = S;
            size_t Bmat_j_1_max__ = S;
            for (size_t j_2__ = 0; j_2__ < Bmat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Bmat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Bmat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Uvec_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < Uvec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Uvec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n_pos;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t x0_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pro_dev_j_1_max__ = S;
        size_t pro_dev_k_0_max__ = (N - 1);
        for (size_t j_1__ = 0; j_1__ < pro_dev_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < pro_dev_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pro_dev" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t U_j_1_max__ = (n_trends * est_trend);
        for (size_t j_1__ = 0; j_1__ < U_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "U" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t B_j_2_max__ = (S * est_B);
        size_t B_j_1_max__ = (S * est_B);
        for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_process_k_0_max__ = S;
        for (size_t k_0__ = 0; k_0__ < sigma_process_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_process" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_obs_k_0_max__ = n_obsvar;
        for (size_t k_0__ = 0; k_0__ < sigma_obs_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_obs" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t pred_j_1_max__ = M;
            size_t pred_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < pred_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t x_j_1_max__ = S;
            size_t x_k_0_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Bmat_j_2_max__ = S;
            size_t Bmat_j_1_max__ = S;
            for (size_t j_2__ = 0; j_2__ < Bmat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Bmat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Bmat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Uvec_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < Uvec_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Uvec" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = n_pos;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_marss_namespace::model_marss stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
