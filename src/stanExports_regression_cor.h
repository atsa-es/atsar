// Generated by rstantools.  Do not edit by hand.

/*
    atsarpackage is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    atsarpackage is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with atsarpackage.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_regression_cor_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 57> locations_array__ =
  {" (found before start of program)",
  " (in 'regression_cor', line 10, column 2 to column 17)",
  " (in 'regression_cor', line 11, column 2 to column 22)",
  " (in 'regression_cor', line 12, column 2 to column 29)",
  " (in 'regression_cor', line 15, column 2 to column 17)",
  " (in 'regression_cor', line 16, column 2 to column 20)",
  " (in 'regression_cor', line 17, column 2 to column 17)",
  " (in 'regression_cor', line 37, column 2 to column 20)",
  " (in 'regression_cor', line 18, column 2 to column 24)",
  " (in 'regression_cor', line 19, column 2 to column 28)",
  " (in 'regression_cor', line 21, column 2 to column 24)",
  " (in 'regression_cor', line 22, column 2 to column 51)",
  " (in 'regression_cor', line 20, column 16 to line 23, column 3)",
  " (in 'regression_cor', line 20, column 2 to line 23, column 3)",
  " (in 'regression_cor', line 24, column 2 to column 46)",
  " (in 'regression_cor', line 39, column 31 to column 83)",
  " (in 'regression_cor', line 39, column 16 to column 83)",
  " (in 'regression_cor', line 39, column 2 to column 83)",
  " (in 'regression_cor', line 40, column 31 to column 90)",
  " (in 'regression_cor', line 40, column 16 to column 90)",
  " (in 'regression_cor', line 40, column 2 to column 90)",
  " (in 'regression_cor', line 41, column 31 to column 82)",
  " (in 'regression_cor', line 41, column 16 to column 82)",
  " (in 'regression_cor', line 41, column 2 to column 82)",
  " (in 'regression_cor', line 42, column 31 to column 100)",
  " (in 'regression_cor', line 42, column 16 to column 100)",
  " (in 'regression_cor', line 42, column 2 to column 100)",
  " (in 'regression_cor', line 43, column 31 to column 86)",
  " (in 'regression_cor', line 43, column 16 to column 86)",
  " (in 'regression_cor', line 43, column 2 to column 86)",
  " (in 'regression_cor', line 27, column 2 to column 20)",
  " (in 'regression_cor', line 28, column 2 to column 21)",
  " (in 'regression_cor', line 29, column 2 to column 27)",
  " (in 'regression_cor', line 30, column 16 to column 44)",
  " (in 'regression_cor', line 30, column 2 to column 44)",
  " (in 'regression_cor', line 31, column 16 to column 46)",
  " (in 'regression_cor', line 31, column 2 to column 46)",
  " (in 'regression_cor', line 32, column 16 to column 42)",
  " (in 'regression_cor', line 32, column 2 to column 42)",
  " (in 'regression_cor', line 33, column 16 to column 61)",
  " (in 'regression_cor', line 33, column 2 to column 61)",
  " (in 'regression_cor', line 34, column 16 to column 47)",
  " (in 'regression_cor', line 34, column 2 to column 47)",
  " (in 'regression_cor', line 2, column 2 to column 17)",
  " (in 'regression_cor', line 3, column 2 to column 17)",
  " (in 'regression_cor', line 4, column 9 to column 10)",
  " (in 'regression_cor', line 4, column 12 to column 13)",
  " (in 'regression_cor', line 4, column 2 to column 17)",
  " (in 'regression_cor', line 5, column 9 to column 10)",
  " (in 'regression_cor', line 5, column 2 to column 14)",
  " (in 'regression_cor', line 6, column 12 to column 13)",
  " (in 'regression_cor', line 6, column 2 to column 15)",
  " (in 'regression_cor', line 7, column 2 to column 13)",
  " (in 'regression_cor', line 10, column 9 to column 10)",
  " (in 'regression_cor', line 15, column 9 to column 10)",
  " (in 'regression_cor', line 16, column 9 to column 10)",
  " (in 'regression_cor', line 37, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_regression_cor final : public model_base_crtp<model_regression_cor> {
private:
  int N;
  int K;
  Eigen::Matrix<double,-1,-1> x_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  std::vector<int> y_int;
  int family;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
public:
  ~model_regression_cor() {}
  model_regression_cor(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_regression_cor_namespace::model_regression_cor";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 43;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 43;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 44;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("x", "K", K);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K)});
      x_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_data__.data(), N, K);
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 47;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 47;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 47;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 47;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 48;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 49;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 49;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 49;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 50;
      stan::math::validate_non_negative_index("y_int", "N", N);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "y_int", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_int = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 51;
      y_int = context__.vals_i("y_int");
      current_statement__ = 52;
      context__.validate_dims("data initialization", "family", "int",
        std::vector<size_t>{});
      family = std::numeric_limits<int>::min();
      current_statement__ = 52;
      family = context__.vals_i("family")[(1 - 1)];
      current_statement__ = 53;
      stan::math::validate_non_negative_index("beta", "K", K);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("pred", "N", N);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("epsilon", "N", N);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = K + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_regression_cor";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_regression_cor_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 3;
      phi = in__.template read_constrain_lub<local_scalar_t__,
              jacobian__>(-1, 1, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> pred =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      local_scalar_t__ sigma_cor = DUMMY_VAR__;
      current_statement__ = 8;
      stan::model::assign(pred,
        stan::math::multiply(
          stan::model::rvalue(x, "x", stan::model::index_uni(1)), beta),
        "assigning variable pred", stan::model::index_uni(1));
      current_statement__ = 9;
      stan::model::assign(epsilon,
        (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
        stan::model::rvalue(pred, "pred", stan::model::index_uni(1))),
        "assigning variable epsilon", stan::model::index_uni(1));
      current_statement__ = 13;
      for (int i = 2; i <= N; ++i) {
        current_statement__ = 10;
        stan::model::assign(pred,
          stan::math::multiply(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), beta),
          "assigning variable pred", stan::model::index_uni(i));
        current_statement__ = 11;
        stan::model::assign(epsilon,
          ((stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(pred, "pred", stan::model::index_uni(i))) -
          (phi *
          stan::model::rvalue(epsilon, "epsilon",
            stan::model::index_uni((i - 1))))), "assigning variable epsilon",
          stan::model::index_uni(i));
      }
      current_statement__ = 14;
      sigma_cor = stan::math::sqrt(((sigma * sigma) * (1 - (phi * phi))));
      {
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(phi, 0, 1));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, 2));
        current_statement__ = 32;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(sigma, 3, 0, 2));
        current_statement__ = 34;
        if (stan::math::logical_eq(family, 1)) {
          current_statement__ = 33;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(y, pred, sigma_cor));
        }
        current_statement__ = 36;
        if (stan::math::logical_eq(family, 2)) {
          current_statement__ = 35;
          lp_accum__.add(stan::math::bernoulli_logit_lpmf<propto__>(y_int,
                           pred));
        }
        current_statement__ = 38;
        if (stan::math::logical_eq(family, 3)) {
          current_statement__ = 37;
          lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(y_int, pred));
        }
        current_statement__ = 40;
        if (stan::math::logical_eq(family, 4)) {
          current_statement__ = 39;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(y, sigma_cor,
                           stan::math::elt_divide(sigma_cor,
                             stan::math::exp(pred))));
        }
        current_statement__ = 42;
        if (stan::math::logical_eq(family, 5)) {
          current_statement__ = 41;
          lp_accum__.add(stan::math::lognormal_lpdf<propto__>(y, pred,
                           sigma_cor));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_regression_cor_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double phi = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      phi = in__.template read_constrain_lub<local_scalar_t__,
              jacobian__>(-1, 1, lp__);
      Eigen::Matrix<double,-1,1> pred =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> epsilon =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double sigma_cor = std::numeric_limits<double>::quiet_NaN();
      out__.write(beta);
      out__.write(sigma);
      out__.write(phi);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 8;
      stan::model::assign(pred,
        stan::math::multiply(
          stan::model::rvalue(x, "x", stan::model::index_uni(1)), beta),
        "assigning variable pred", stan::model::index_uni(1));
      current_statement__ = 9;
      stan::model::assign(epsilon,
        (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
        stan::model::rvalue(pred, "pred", stan::model::index_uni(1))),
        "assigning variable epsilon", stan::model::index_uni(1));
      current_statement__ = 13;
      for (int i = 2; i <= N; ++i) {
        current_statement__ = 10;
        stan::model::assign(pred,
          stan::math::multiply(
            stan::model::rvalue(x, "x", stan::model::index_uni(i)), beta),
          "assigning variable pred", stan::model::index_uni(i));
        current_statement__ = 11;
        stan::model::assign(epsilon,
          ((stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(pred, "pred", stan::model::index_uni(i))) -
          (phi *
          stan::model::rvalue(epsilon, "epsilon",
            stan::model::index_uni((i - 1))))), "assigning variable epsilon",
          stan::model::index_uni(i));
      }
      current_statement__ = 14;
      sigma_cor = stan::math::sqrt(((sigma * sigma) * (1 - (phi * phi))));
      if (emit_transformed_parameters__) {
        out__.write(pred);
        out__.write(epsilon);
        out__.write(sigma_cor);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      if (stan::math::logical_eq(family, 1)) {
        current_statement__ = 16;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 15;
          stan::model::assign(log_lik,
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(pred, "pred", stan::model::index_uni(n)),
              sigma_cor), "assigning variable log_lik",
            stan::model::index_uni(n));
        }
      }
      current_statement__ = 20;
      if (stan::math::logical_eq(family, 2)) {
        current_statement__ = 19;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 18;
          stan::model::assign(log_lik,
            stan::math::bernoulli_lpmf<false>(
              stan::model::rvalue(y_int, "y_int", stan::model::index_uni(n)),
              stan::math::inv_logit(
                stan::model::rvalue(pred, "pred", stan::model::index_uni(n)))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 23;
      if (stan::math::logical_eq(family, 3)) {
        current_statement__ = 22;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 21;
          stan::model::assign(log_lik,
            stan::math::poisson_lpmf<false>(
              stan::model::rvalue(y_int, "y_int", stan::model::index_uni(n)),
              stan::math::exp(
                stan::model::rvalue(pred, "pred", stan::model::index_uni(n)))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 26;
      if (stan::math::logical_eq(family, 4)) {
        current_statement__ = 25;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 24;
          stan::model::assign(log_lik,
            stan::math::gamma_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              sigma_cor, (sigma_cor /
              stan::math::exp(
                stan::model::rvalue(pred, "pred", stan::model::index_uni(n))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 29;
      if (stan::math::logical_eq(family, 5)) {
        current_statement__ = 28;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 27;
          stan::model::assign(log_lik,
            stan::math::lognormal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(pred, "pred", stan::model::index_uni(n)),
              sigma_cor), "assigning variable log_lik",
            stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable beta");
      out__.write(beta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 3;
      phi = in__.read<local_scalar_t__>();
      out__.write_free_lub(-1, 1, phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 2;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 3;
      phi = context__.vals_r("phi")[(1 - 1)];
      out__.write_free_lub(-1, 1, phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "sigma", "phi"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"pred", "epsilon", "sigma_cor"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(K)},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "epsilon" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "sigma_cor");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "epsilon" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "sigma_cor");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_cor\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_cor\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((K + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((N + N) +
      1));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((K + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((N + N) +
      1));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_regression_cor_namespace::model_regression_cor;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_regression_cor_namespace::profiles__;
}
#endif
#endif
